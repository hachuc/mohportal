/**
 * OpenCPS is the open source Core Public Services software
 * Copyright (C) 2016-present OpenCPS community
 * 
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU Affero General Public License for more details.
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>
 */

package com.viettel.portal.vcms.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.util.PortalUtil;

import com.viettel.portal.vcms.model.Notes;
import com.viettel.portal.vcms.model.NotesModel;
import com.viettel.portal.vcms.model.NotesSoap;
import com.viettel.portal.vcms.service.persistence.NotesPK;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the Notes service. Represents a row in the &quot;vcms_Notes&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.viettel.portal.vcms.model.NotesModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link NotesImpl}.
 * </p>
 *
 * @author chuchv
 * @see NotesImpl
 * @see com.viettel.portal.vcms.model.Notes
 * @see com.viettel.portal.vcms.model.NotesModel
 * @generated
 */
@JSON(strict = true)
public class NotesModelImpl extends BaseModelImpl<Notes> implements NotesModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a notes model instance should use the {@link com.viettel.portal.vcms.model.Notes} interface instead.
	 */
	public static final String TABLE_NAME = "vcms_Notes";
	public static final Object[][] TABLE_COLUMNS = {
			{ "ContentID", Types.BIGINT },
			{ "Version", Types.INTEGER },
			{ "groupId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "userName", Types.VARCHAR },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "Content", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table vcms_Notes (ContentID LONG not null,Version INTEGER not null,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,Content STRING null,primary key (ContentID, Version))";
	public static final String TABLE_SQL_DROP = "drop table vcms_Notes";
	public static final String ORDER_BY_JPQL = " ORDER BY notes.modifiedDate DESC";
	public static final String ORDER_BY_SQL = " ORDER BY vcms_Notes.modifiedDate DESC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.viettel.portal.vcms.model.Notes"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.viettel.portal.vcms.model.Notes"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.viettel.portal.vcms.model.Notes"),
			true);
	public static long CONTENTID_COLUMN_BITMASK = 1L;
	public static long VERSION_COLUMN_BITMASK = 2L;
	public static long GROUPID_COLUMN_BITMASK = 4L;
	public static long MODIFIEDDATE_COLUMN_BITMASK = 8L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static Notes toModel(NotesSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		Notes model = new NotesImpl();

		model.setContentID(soapModel.getContentID());
		model.setVersion(soapModel.getVersion());
		model.setGroupId(soapModel.getGroupId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setUserId(soapModel.getUserId());
		model.setUserName(soapModel.getUserName());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setContent(soapModel.getContent());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<Notes> toModels(NotesSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<Notes> models = new ArrayList<Notes>(soapModels.length);

		for (NotesSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.viettel.portal.vcms.model.Notes"));

	public NotesModelImpl() {
	}

	@Override
	public NotesPK getPrimaryKey() {
		return new NotesPK(_ContentID, _Version);
	}

	@Override
	public void setPrimaryKey(NotesPK primaryKey) {
		setContentID(primaryKey.ContentID);
		setVersion(primaryKey.Version);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return new NotesPK(_ContentID, _Version);
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey((NotesPK)primaryKeyObj);
	}

	@Override
	public Class<?> getModelClass() {
		return Notes.class;
	}

	@Override
	public String getModelClassName() {
		return Notes.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("ContentID", getContentID());
		attributes.put("Version", getVersion());
		attributes.put("groupId", getGroupId());
		attributes.put("companyId", getCompanyId());
		attributes.put("userId", getUserId());
		attributes.put("userName", getUserName());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("Content", getContent());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long ContentID = (Long)attributes.get("ContentID");

		if (ContentID != null) {
			setContentID(ContentID);
		}

		Integer Version = (Integer)attributes.get("Version");

		if (Version != null) {
			setVersion(Version);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		String userName = (String)attributes.get("userName");

		if (userName != null) {
			setUserName(userName);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		String Content = (String)attributes.get("Content");

		if (Content != null) {
			setContent(Content);
		}
	}

	@JSON
	@Override
	public long getContentID() {
		return _ContentID;
	}

	@Override
	public void setContentID(long ContentID) {
		_columnBitmask |= CONTENTID_COLUMN_BITMASK;

		if (!_setOriginalContentID) {
			_setOriginalContentID = true;

			_originalContentID = _ContentID;
		}

		_ContentID = ContentID;
	}

	public long getOriginalContentID() {
		return _originalContentID;
	}

	@JSON
	@Override
	public int getVersion() {
		return _Version;
	}

	@Override
	public void setVersion(int Version) {
		_columnBitmask |= VERSION_COLUMN_BITMASK;

		if (!_setOriginalVersion) {
			_setOriginalVersion = true;

			_originalVersion = _Version;
		}

		_Version = Version;
	}

	public int getOriginalVersion() {
		return _originalVersion;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_companyId = companyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	@Override
	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return StringPool.BLANK;
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_columnBitmask = -1L;

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getContent() {
		if (_Content == null) {
			return StringPool.BLANK;
		}
		else {
			return _Content;
		}
	}

	@Override
	public void setContent(String Content) {
		_Content = Content;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public Notes toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Notes)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		NotesImpl notesImpl = new NotesImpl();

		notesImpl.setContentID(getContentID());
		notesImpl.setVersion(getVersion());
		notesImpl.setGroupId(getGroupId());
		notesImpl.setCompanyId(getCompanyId());
		notesImpl.setUserId(getUserId());
		notesImpl.setUserName(getUserName());
		notesImpl.setCreateDate(getCreateDate());
		notesImpl.setModifiedDate(getModifiedDate());
		notesImpl.setContent(getContent());

		notesImpl.resetOriginalValues();

		return notesImpl;
	}

	@Override
	public int compareTo(Notes notes) {
		int value = 0;

		value = DateUtil.compareTo(getModifiedDate(), notes.getModifiedDate());

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Notes)) {
			return false;
		}

		Notes notes = (Notes)obj;

		NotesPK primaryKey = notes.getPrimaryKey();

		if (getPrimaryKey().equals(primaryKey)) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey().hashCode();
	}

	@Override
	public void resetOriginalValues() {
		NotesModelImpl notesModelImpl = this;

		notesModelImpl._originalContentID = notesModelImpl._ContentID;

		notesModelImpl._setOriginalContentID = false;

		notesModelImpl._originalVersion = notesModelImpl._Version;

		notesModelImpl._setOriginalVersion = false;

		notesModelImpl._originalGroupId = notesModelImpl._groupId;

		notesModelImpl._setOriginalGroupId = false;

		notesModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<Notes> toCacheModel() {
		NotesCacheModel notesCacheModel = new NotesCacheModel();

		notesCacheModel.ContentID = getContentID();

		notesCacheModel.Version = getVersion();

		notesCacheModel.groupId = getGroupId();

		notesCacheModel.companyId = getCompanyId();

		notesCacheModel.userId = getUserId();

		notesCacheModel.userName = getUserName();

		String userName = notesCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			notesCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			notesCacheModel.createDate = createDate.getTime();
		}
		else {
			notesCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			notesCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			notesCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		notesCacheModel.Content = getContent();

		String Content = notesCacheModel.Content;

		if ((Content != null) && (Content.length() == 0)) {
			notesCacheModel.Content = null;
		}

		return notesCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(19);

		sb.append("{ContentID=");
		sb.append(getContentID());
		sb.append(", Version=");
		sb.append(getVersion());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", userName=");
		sb.append(getUserName());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", Content=");
		sb.append(getContent());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(31);

		sb.append("<model><model-name>");
		sb.append("com.viettel.portal.vcms.model.Notes");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>ContentID</column-name><column-value><![CDATA[");
		sb.append(getContentID());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>Version</column-name><column-value><![CDATA[");
		sb.append(getVersion());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userName</column-name><column-value><![CDATA[");
		sb.append(getUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>Content</column-name><column-value><![CDATA[");
		sb.append(getContent());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = Notes.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] { Notes.class };
	private long _ContentID;
	private long _originalContentID;
	private boolean _setOriginalContentID;
	private int _Version;
	private int _originalVersion;
	private boolean _setOriginalVersion;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _companyId;
	private long _userId;
	private String _userUuid;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private String _Content;
	private long _columnBitmask;
	private Notes _escapedModel;
}