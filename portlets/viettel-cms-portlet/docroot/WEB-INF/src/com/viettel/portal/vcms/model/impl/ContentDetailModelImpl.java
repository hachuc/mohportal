/**
 * OpenCPS is the open source Core Public Services software
 * Copyright (C) 2016-present OpenCPS community
 * 
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU Affero General Public License for more details.
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>
 */

package com.viettel.portal.vcms.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import com.viettel.portal.vcms.model.ContentDetail;
import com.viettel.portal.vcms.model.ContentDetailModel;
import com.viettel.portal.vcms.model.ContentDetailSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the ContentDetail service. Represents a row in the &quot;vcms_Content_Detail&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.viettel.portal.vcms.model.ContentDetailModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ContentDetailImpl}.
 * </p>
 *
 * @author chuchv
 * @see ContentDetailImpl
 * @see com.viettel.portal.vcms.model.ContentDetail
 * @see com.viettel.portal.vcms.model.ContentDetailModel
 * @generated
 */
@JSON(strict = true)
public class ContentDetailModelImpl extends BaseModelImpl<ContentDetail>
	implements ContentDetailModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a content detail model instance should use the {@link com.viettel.portal.vcms.model.ContentDetail} interface instead.
	 */
	public static final String TABLE_NAME = "vcms_Content_Detail";
	public static final Object[][] TABLE_COLUMNS = {
			{ "autoId", Types.BIGINT },
			{ "contentId", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "userName", Types.VARCHAR },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "version", Types.INTEGER },
			{ "subversion", Types.FLOAT },
			{ "subTitle", Types.VARCHAR },
			{ "title", Types.VARCHAR },
			{ "summary", Types.VARCHAR },
			{ "subContent", Types.VARCHAR },
			{ "content", Types.CLOB },
			{ "smallImageId", Types.BIGINT },
			{ "smallImageUrl", Types.VARCHAR },
			{ "categoryId", Types.BIGINT },
			{ "status", Types.INTEGER },
			{ "newsType", Types.INTEGER },
			{ "imageUrl", Types.VARCHAR },
			{ "isLegalContent", Types.BOOLEAN },
			{ "imageCaption", Types.VARCHAR },
			{ "imagePosition", Types.INTEGER }
		};
	public static final String TABLE_SQL_CREATE = "create table vcms_Content_Detail (autoId LONG not null primary key,contentId LONG,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,version INTEGER,subversion DOUBLE,subTitle STRING null,title STRING null,summary STRING null,subContent STRING null,content TEXT null,smallImageId LONG,smallImageUrl VARCHAR(500) null,categoryId LONG,status INTEGER,newsType INTEGER,imageUrl VARCHAR(500) null,isLegalContent BOOLEAN,imageCaption VARCHAR(1000) null,imagePosition INTEGER)";
	public static final String TABLE_SQL_DROP = "drop table vcms_Content_Detail";
	public static final String ORDER_BY_JPQL = " ORDER BY contentDetail.modifiedDate ASC";
	public static final String ORDER_BY_SQL = " ORDER BY vcms_Content_Detail.modifiedDate ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.viettel.portal.vcms.model.ContentDetail"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.viettel.portal.vcms.model.ContentDetail"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.viettel.portal.vcms.model.ContentDetail"),
			true);
	public static long CATEGORYID_COLUMN_BITMASK = 1L;
	public static long CONTENTID_COLUMN_BITMASK = 2L;
	public static long GROUPID_COLUMN_BITMASK = 4L;
	public static long STATUS_COLUMN_BITMASK = 8L;
	public static long VERSION_COLUMN_BITMASK = 16L;
	public static long MODIFIEDDATE_COLUMN_BITMASK = 32L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static ContentDetail toModel(ContentDetailSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		ContentDetail model = new ContentDetailImpl();

		model.setAutoId(soapModel.getAutoId());
		model.setContentId(soapModel.getContentId());
		model.setGroupId(soapModel.getGroupId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setUserId(soapModel.getUserId());
		model.setUserName(soapModel.getUserName());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setVersion(soapModel.getVersion());
		model.setSubversion(soapModel.getSubversion());
		model.setSubTitle(soapModel.getSubTitle());
		model.setTitle(soapModel.getTitle());
		model.setSummary(soapModel.getSummary());
		model.setSubContent(soapModel.getSubContent());
		model.setContent(soapModel.getContent());
		model.setSmallImageId(soapModel.getSmallImageId());
		model.setSmallImageUrl(soapModel.getSmallImageUrl());
		model.setCategoryId(soapModel.getCategoryId());
		model.setStatus(soapModel.getStatus());
		model.setNewsType(soapModel.getNewsType());
		model.setImageUrl(soapModel.getImageUrl());
		model.setIsLegalContent(soapModel.getIsLegalContent());
		model.setImageCaption(soapModel.getImageCaption());
		model.setImagePosition(soapModel.getImagePosition());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<ContentDetail> toModels(ContentDetailSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<ContentDetail> models = new ArrayList<ContentDetail>(soapModels.length);

		for (ContentDetailSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.viettel.portal.vcms.model.ContentDetail"));

	public ContentDetailModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _autoId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setAutoId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _autoId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return ContentDetail.class;
	}

	@Override
	public String getModelClassName() {
		return ContentDetail.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("autoId", getAutoId());
		attributes.put("contentId", getContentId());
		attributes.put("groupId", getGroupId());
		attributes.put("companyId", getCompanyId());
		attributes.put("userId", getUserId());
		attributes.put("userName", getUserName());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("version", getVersion());
		attributes.put("subversion", getSubversion());
		attributes.put("subTitle", getSubTitle());
		attributes.put("title", getTitle());
		attributes.put("summary", getSummary());
		attributes.put("subContent", getSubContent());
		attributes.put("content", getContent());
		attributes.put("smallImageId", getSmallImageId());
		attributes.put("smallImageUrl", getSmallImageUrl());
		attributes.put("categoryId", getCategoryId());
		attributes.put("status", getStatus());
		attributes.put("newsType", getNewsType());
		attributes.put("imageUrl", getImageUrl());
		attributes.put("isLegalContent", getIsLegalContent());
		attributes.put("imageCaption", getImageCaption());
		attributes.put("imagePosition", getImagePosition());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long autoId = (Long)attributes.get("autoId");

		if (autoId != null) {
			setAutoId(autoId);
		}

		Long contentId = (Long)attributes.get("contentId");

		if (contentId != null) {
			setContentId(contentId);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		String userName = (String)attributes.get("userName");

		if (userName != null) {
			setUserName(userName);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		Integer version = (Integer)attributes.get("version");

		if (version != null) {
			setVersion(version);
		}

		Float subversion = (Float)attributes.get("subversion");

		if (subversion != null) {
			setSubversion(subversion);
		}

		String subTitle = (String)attributes.get("subTitle");

		if (subTitle != null) {
			setSubTitle(subTitle);
		}

		String title = (String)attributes.get("title");

		if (title != null) {
			setTitle(title);
		}

		String summary = (String)attributes.get("summary");

		if (summary != null) {
			setSummary(summary);
		}

		String subContent = (String)attributes.get("subContent");

		if (subContent != null) {
			setSubContent(subContent);
		}

		String content = (String)attributes.get("content");

		if (content != null) {
			setContent(content);
		}

		Long smallImageId = (Long)attributes.get("smallImageId");

		if (smallImageId != null) {
			setSmallImageId(smallImageId);
		}

		String smallImageUrl = (String)attributes.get("smallImageUrl");

		if (smallImageUrl != null) {
			setSmallImageUrl(smallImageUrl);
		}

		Long categoryId = (Long)attributes.get("categoryId");

		if (categoryId != null) {
			setCategoryId(categoryId);
		}

		Integer status = (Integer)attributes.get("status");

		if (status != null) {
			setStatus(status);
		}

		Integer newsType = (Integer)attributes.get("newsType");

		if (newsType != null) {
			setNewsType(newsType);
		}

		String imageUrl = (String)attributes.get("imageUrl");

		if (imageUrl != null) {
			setImageUrl(imageUrl);
		}

		Boolean isLegalContent = (Boolean)attributes.get("isLegalContent");

		if (isLegalContent != null) {
			setIsLegalContent(isLegalContent);
		}

		String imageCaption = (String)attributes.get("imageCaption");

		if (imageCaption != null) {
			setImageCaption(imageCaption);
		}

		Integer imagePosition = (Integer)attributes.get("imagePosition");

		if (imagePosition != null) {
			setImagePosition(imagePosition);
		}
	}

	@JSON
	@Override
	public long getAutoId() {
		return _autoId;
	}

	@Override
	public void setAutoId(long autoId) {
		_autoId = autoId;
	}

	@JSON
	@Override
	public long getContentId() {
		return _contentId;
	}

	@Override
	public void setContentId(long contentId) {
		_columnBitmask |= CONTENTID_COLUMN_BITMASK;

		if (!_setOriginalContentId) {
			_setOriginalContentId = true;

			_originalContentId = _contentId;
		}

		_contentId = contentId;
	}

	public long getOriginalContentId() {
		return _originalContentId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_companyId = companyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	@Override
	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return StringPool.BLANK;
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_columnBitmask = -1L;

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public int getVersion() {
		return _version;
	}

	@Override
	public void setVersion(int version) {
		_columnBitmask |= VERSION_COLUMN_BITMASK;

		if (!_setOriginalVersion) {
			_setOriginalVersion = true;

			_originalVersion = _version;
		}

		_version = version;
	}

	public int getOriginalVersion() {
		return _originalVersion;
	}

	@JSON
	@Override
	public float getSubversion() {
		return _subversion;
	}

	@Override
	public void setSubversion(float subversion) {
		_subversion = subversion;
	}

	@JSON
	@Override
	public String getSubTitle() {
		if (_subTitle == null) {
			return StringPool.BLANK;
		}
		else {
			return _subTitle;
		}
	}

	@Override
	public void setSubTitle(String subTitle) {
		_subTitle = subTitle;
	}

	@JSON
	@Override
	public String getTitle() {
		if (_title == null) {
			return StringPool.BLANK;
		}
		else {
			return _title;
		}
	}

	@Override
	public void setTitle(String title) {
		_title = title;
	}

	@JSON
	@Override
	public String getSummary() {
		if (_summary == null) {
			return StringPool.BLANK;
		}
		else {
			return _summary;
		}
	}

	@Override
	public void setSummary(String summary) {
		_summary = summary;
	}

	@JSON
	@Override
	public String getSubContent() {
		if (_subContent == null) {
			return StringPool.BLANK;
		}
		else {
			return _subContent;
		}
	}

	@Override
	public void setSubContent(String subContent) {
		_subContent = subContent;
	}

	@JSON
	@Override
	public String getContent() {
		if (_content == null) {
			return StringPool.BLANK;
		}
		else {
			return _content;
		}
	}

	@Override
	public void setContent(String content) {
		_content = content;
	}

	@JSON
	@Override
	public long getSmallImageId() {
		return _smallImageId;
	}

	@Override
	public void setSmallImageId(long smallImageId) {
		_smallImageId = smallImageId;
	}

	@JSON
	@Override
	public String getSmallImageUrl() {
		if (_smallImageUrl == null) {
			return StringPool.BLANK;
		}
		else {
			return _smallImageUrl;
		}
	}

	@Override
	public void setSmallImageUrl(String smallImageUrl) {
		_smallImageUrl = smallImageUrl;
	}

	@JSON
	@Override
	public long getCategoryId() {
		return _categoryId;
	}

	@Override
	public void setCategoryId(long categoryId) {
		_columnBitmask |= CATEGORYID_COLUMN_BITMASK;

		if (!_setOriginalCategoryId) {
			_setOriginalCategoryId = true;

			_originalCategoryId = _categoryId;
		}

		_categoryId = categoryId;
	}

	public long getOriginalCategoryId() {
		return _originalCategoryId;
	}

	@JSON
	@Override
	public int getStatus() {
		return _status;
	}

	@Override
	public void setStatus(int status) {
		_columnBitmask |= STATUS_COLUMN_BITMASK;

		if (!_setOriginalStatus) {
			_setOriginalStatus = true;

			_originalStatus = _status;
		}

		_status = status;
	}

	public int getOriginalStatus() {
		return _originalStatus;
	}

	@JSON
	@Override
	public int getNewsType() {
		return _newsType;
	}

	@Override
	public void setNewsType(int newsType) {
		_newsType = newsType;
	}

	@JSON
	@Override
	public String getImageUrl() {
		if (_imageUrl == null) {
			return StringPool.BLANK;
		}
		else {
			return _imageUrl;
		}
	}

	@Override
	public void setImageUrl(String imageUrl) {
		_imageUrl = imageUrl;
	}

	@JSON
	@Override
	public boolean getIsLegalContent() {
		return _isLegalContent;
	}

	@Override
	public boolean isIsLegalContent() {
		return _isLegalContent;
	}

	@Override
	public void setIsLegalContent(boolean isLegalContent) {
		_isLegalContent = isLegalContent;
	}

	@JSON
	@Override
	public String getImageCaption() {
		if (_imageCaption == null) {
			return StringPool.BLANK;
		}
		else {
			return _imageCaption;
		}
	}

	@Override
	public void setImageCaption(String imageCaption) {
		_imageCaption = imageCaption;
	}

	@JSON
	@Override
	public int getImagePosition() {
		return _imagePosition;
	}

	@Override
	public void setImagePosition(int imagePosition) {
		_imagePosition = imagePosition;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			ContentDetail.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public ContentDetail toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (ContentDetail)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ContentDetailImpl contentDetailImpl = new ContentDetailImpl();

		contentDetailImpl.setAutoId(getAutoId());
		contentDetailImpl.setContentId(getContentId());
		contentDetailImpl.setGroupId(getGroupId());
		contentDetailImpl.setCompanyId(getCompanyId());
		contentDetailImpl.setUserId(getUserId());
		contentDetailImpl.setUserName(getUserName());
		contentDetailImpl.setCreateDate(getCreateDate());
		contentDetailImpl.setModifiedDate(getModifiedDate());
		contentDetailImpl.setVersion(getVersion());
		contentDetailImpl.setSubversion(getSubversion());
		contentDetailImpl.setSubTitle(getSubTitle());
		contentDetailImpl.setTitle(getTitle());
		contentDetailImpl.setSummary(getSummary());
		contentDetailImpl.setSubContent(getSubContent());
		contentDetailImpl.setContent(getContent());
		contentDetailImpl.setSmallImageId(getSmallImageId());
		contentDetailImpl.setSmallImageUrl(getSmallImageUrl());
		contentDetailImpl.setCategoryId(getCategoryId());
		contentDetailImpl.setStatus(getStatus());
		contentDetailImpl.setNewsType(getNewsType());
		contentDetailImpl.setImageUrl(getImageUrl());
		contentDetailImpl.setIsLegalContent(getIsLegalContent());
		contentDetailImpl.setImageCaption(getImageCaption());
		contentDetailImpl.setImagePosition(getImagePosition());

		contentDetailImpl.resetOriginalValues();

		return contentDetailImpl;
	}

	@Override
	public int compareTo(ContentDetail contentDetail) {
		int value = 0;

		value = DateUtil.compareTo(getModifiedDate(),
				contentDetail.getModifiedDate());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof ContentDetail)) {
			return false;
		}

		ContentDetail contentDetail = (ContentDetail)obj;

		long primaryKey = contentDetail.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		ContentDetailModelImpl contentDetailModelImpl = this;

		contentDetailModelImpl._originalContentId = contentDetailModelImpl._contentId;

		contentDetailModelImpl._setOriginalContentId = false;

		contentDetailModelImpl._originalGroupId = contentDetailModelImpl._groupId;

		contentDetailModelImpl._setOriginalGroupId = false;

		contentDetailModelImpl._originalVersion = contentDetailModelImpl._version;

		contentDetailModelImpl._setOriginalVersion = false;

		contentDetailModelImpl._originalCategoryId = contentDetailModelImpl._categoryId;

		contentDetailModelImpl._setOriginalCategoryId = false;

		contentDetailModelImpl._originalStatus = contentDetailModelImpl._status;

		contentDetailModelImpl._setOriginalStatus = false;

		contentDetailModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<ContentDetail> toCacheModel() {
		ContentDetailCacheModel contentDetailCacheModel = new ContentDetailCacheModel();

		contentDetailCacheModel.autoId = getAutoId();

		contentDetailCacheModel.contentId = getContentId();

		contentDetailCacheModel.groupId = getGroupId();

		contentDetailCacheModel.companyId = getCompanyId();

		contentDetailCacheModel.userId = getUserId();

		contentDetailCacheModel.userName = getUserName();

		String userName = contentDetailCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			contentDetailCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			contentDetailCacheModel.createDate = createDate.getTime();
		}
		else {
			contentDetailCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			contentDetailCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			contentDetailCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		contentDetailCacheModel.version = getVersion();

		contentDetailCacheModel.subversion = getSubversion();

		contentDetailCacheModel.subTitle = getSubTitle();

		String subTitle = contentDetailCacheModel.subTitle;

		if ((subTitle != null) && (subTitle.length() == 0)) {
			contentDetailCacheModel.subTitle = null;
		}

		contentDetailCacheModel.title = getTitle();

		String title = contentDetailCacheModel.title;

		if ((title != null) && (title.length() == 0)) {
			contentDetailCacheModel.title = null;
		}

		contentDetailCacheModel.summary = getSummary();

		String summary = contentDetailCacheModel.summary;

		if ((summary != null) && (summary.length() == 0)) {
			contentDetailCacheModel.summary = null;
		}

		contentDetailCacheModel.subContent = getSubContent();

		String subContent = contentDetailCacheModel.subContent;

		if ((subContent != null) && (subContent.length() == 0)) {
			contentDetailCacheModel.subContent = null;
		}

		contentDetailCacheModel.content = getContent();

		String content = contentDetailCacheModel.content;

		if ((content != null) && (content.length() == 0)) {
			contentDetailCacheModel.content = null;
		}

		contentDetailCacheModel.smallImageId = getSmallImageId();

		contentDetailCacheModel.smallImageUrl = getSmallImageUrl();

		String smallImageUrl = contentDetailCacheModel.smallImageUrl;

		if ((smallImageUrl != null) && (smallImageUrl.length() == 0)) {
			contentDetailCacheModel.smallImageUrl = null;
		}

		contentDetailCacheModel.categoryId = getCategoryId();

		contentDetailCacheModel.status = getStatus();

		contentDetailCacheModel.newsType = getNewsType();

		contentDetailCacheModel.imageUrl = getImageUrl();

		String imageUrl = contentDetailCacheModel.imageUrl;

		if ((imageUrl != null) && (imageUrl.length() == 0)) {
			contentDetailCacheModel.imageUrl = null;
		}

		contentDetailCacheModel.isLegalContent = getIsLegalContent();

		contentDetailCacheModel.imageCaption = getImageCaption();

		String imageCaption = contentDetailCacheModel.imageCaption;

		if ((imageCaption != null) && (imageCaption.length() == 0)) {
			contentDetailCacheModel.imageCaption = null;
		}

		contentDetailCacheModel.imagePosition = getImagePosition();

		return contentDetailCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(49);

		sb.append("{autoId=");
		sb.append(getAutoId());
		sb.append(", contentId=");
		sb.append(getContentId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", userName=");
		sb.append(getUserName());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", version=");
		sb.append(getVersion());
		sb.append(", subversion=");
		sb.append(getSubversion());
		sb.append(", subTitle=");
		sb.append(getSubTitle());
		sb.append(", title=");
		sb.append(getTitle());
		sb.append(", summary=");
		sb.append(getSummary());
		sb.append(", subContent=");
		sb.append(getSubContent());
		sb.append(", content=");
		sb.append(getContent());
		sb.append(", smallImageId=");
		sb.append(getSmallImageId());
		sb.append(", smallImageUrl=");
		sb.append(getSmallImageUrl());
		sb.append(", categoryId=");
		sb.append(getCategoryId());
		sb.append(", status=");
		sb.append(getStatus());
		sb.append(", newsType=");
		sb.append(getNewsType());
		sb.append(", imageUrl=");
		sb.append(getImageUrl());
		sb.append(", isLegalContent=");
		sb.append(getIsLegalContent());
		sb.append(", imageCaption=");
		sb.append(getImageCaption());
		sb.append(", imagePosition=");
		sb.append(getImagePosition());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(76);

		sb.append("<model><model-name>");
		sb.append("com.viettel.portal.vcms.model.ContentDetail");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>autoId</column-name><column-value><![CDATA[");
		sb.append(getAutoId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>contentId</column-name><column-value><![CDATA[");
		sb.append(getContentId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userName</column-name><column-value><![CDATA[");
		sb.append(getUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>version</column-name><column-value><![CDATA[");
		sb.append(getVersion());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>subversion</column-name><column-value><![CDATA[");
		sb.append(getSubversion());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>subTitle</column-name><column-value><![CDATA[");
		sb.append(getSubTitle());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>title</column-name><column-value><![CDATA[");
		sb.append(getTitle());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>summary</column-name><column-value><![CDATA[");
		sb.append(getSummary());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>subContent</column-name><column-value><![CDATA[");
		sb.append(getSubContent());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>content</column-name><column-value><![CDATA[");
		sb.append(getContent());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>smallImageId</column-name><column-value><![CDATA[");
		sb.append(getSmallImageId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>smallImageUrl</column-name><column-value><![CDATA[");
		sb.append(getSmallImageUrl());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>categoryId</column-name><column-value><![CDATA[");
		sb.append(getCategoryId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>status</column-name><column-value><![CDATA[");
		sb.append(getStatus());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>newsType</column-name><column-value><![CDATA[");
		sb.append(getNewsType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>imageUrl</column-name><column-value><![CDATA[");
		sb.append(getImageUrl());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>isLegalContent</column-name><column-value><![CDATA[");
		sb.append(getIsLegalContent());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>imageCaption</column-name><column-value><![CDATA[");
		sb.append(getImageCaption());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>imagePosition</column-name><column-value><![CDATA[");
		sb.append(getImagePosition());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = ContentDetail.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			ContentDetail.class
		};
	private long _autoId;
	private long _contentId;
	private long _originalContentId;
	private boolean _setOriginalContentId;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _companyId;
	private long _userId;
	private String _userUuid;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private int _version;
	private int _originalVersion;
	private boolean _setOriginalVersion;
	private float _subversion;
	private String _subTitle;
	private String _title;
	private String _summary;
	private String _subContent;
	private String _content;
	private long _smallImageId;
	private String _smallImageUrl;
	private long _categoryId;
	private long _originalCategoryId;
	private boolean _setOriginalCategoryId;
	private int _status;
	private int _originalStatus;
	private boolean _setOriginalStatus;
	private int _newsType;
	private String _imageUrl;
	private boolean _isLegalContent;
	private String _imageCaption;
	private int _imagePosition;
	private long _columnBitmask;
	private ContentDetail _escapedModel;
}