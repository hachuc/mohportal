/**
 * OpenCPS is the open source Core Public Services software
 * Copyright (C) 2016-present OpenCPS community
 * 
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU Affero General Public License for more details.
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>
 */

package com.viettel.portal.vcms.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import com.viettel.portal.vcms.model.ContentTypeCost;
import com.viettel.portal.vcms.model.ContentTypeCostModel;
import com.viettel.portal.vcms.model.ContentTypeCostSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the ContentTypeCost service. Represents a row in the &quot;vcms_Content_TypeCost&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.viettel.portal.vcms.model.ContentTypeCostModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ContentTypeCostImpl}.
 * </p>
 *
 * @author chuchv
 * @see ContentTypeCostImpl
 * @see com.viettel.portal.vcms.model.ContentTypeCost
 * @see com.viettel.portal.vcms.model.ContentTypeCostModel
 * @generated
 */
@JSON(strict = true)
public class ContentTypeCostModelImpl extends BaseModelImpl<ContentTypeCost>
	implements ContentTypeCostModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a content type cost model instance should use the {@link com.viettel.portal.vcms.model.ContentTypeCost} interface instead.
	 */
	public static final String TABLE_NAME = "vcms_Content_TypeCost";
	public static final Object[][] TABLE_COLUMNS = {
			{ "costId", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "contentTypeID", Types.BIGINT },
			{ "fromDate", Types.TIMESTAMP },
			{ "toDate", Types.TIMESTAMP },
			{ "cost", Types.DOUBLE }
		};
	public static final String TABLE_SQL_CREATE = "create table vcms_Content_TypeCost (costId LONG not null primary key,groupId LONG,contentTypeID LONG,fromDate DATE null,toDate DATE null,cost DOUBLE)";
	public static final String TABLE_SQL_DROP = "drop table vcms_Content_TypeCost";
	public static final String ORDER_BY_JPQL = " ORDER BY contentTypeCost.toDate DESC";
	public static final String ORDER_BY_SQL = " ORDER BY vcms_Content_TypeCost.toDate DESC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.viettel.portal.vcms.model.ContentTypeCost"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.viettel.portal.vcms.model.ContentTypeCost"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.viettel.portal.vcms.model.ContentTypeCost"),
			true);
	public static long CONTENTTYPEID_COLUMN_BITMASK = 1L;
	public static long FROMDATE_COLUMN_BITMASK = 2L;
	public static long GROUPID_COLUMN_BITMASK = 4L;
	public static long TODATE_COLUMN_BITMASK = 8L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static ContentTypeCost toModel(ContentTypeCostSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		ContentTypeCost model = new ContentTypeCostImpl();

		model.setCostId(soapModel.getCostId());
		model.setGroupId(soapModel.getGroupId());
		model.setContentTypeID(soapModel.getContentTypeID());
		model.setFromDate(soapModel.getFromDate());
		model.setToDate(soapModel.getToDate());
		model.setCost(soapModel.getCost());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<ContentTypeCost> toModels(
		ContentTypeCostSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<ContentTypeCost> models = new ArrayList<ContentTypeCost>(soapModels.length);

		for (ContentTypeCostSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.viettel.portal.vcms.model.ContentTypeCost"));

	public ContentTypeCostModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _costId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setCostId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _costId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return ContentTypeCost.class;
	}

	@Override
	public String getModelClassName() {
		return ContentTypeCost.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("costId", getCostId());
		attributes.put("groupId", getGroupId());
		attributes.put("contentTypeID", getContentTypeID());
		attributes.put("fromDate", getFromDate());
		attributes.put("toDate", getToDate());
		attributes.put("cost", getCost());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long costId = (Long)attributes.get("costId");

		if (costId != null) {
			setCostId(costId);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Long contentTypeID = (Long)attributes.get("contentTypeID");

		if (contentTypeID != null) {
			setContentTypeID(contentTypeID);
		}

		Date fromDate = (Date)attributes.get("fromDate");

		if (fromDate != null) {
			setFromDate(fromDate);
		}

		Date toDate = (Date)attributes.get("toDate");

		if (toDate != null) {
			setToDate(toDate);
		}

		Double cost = (Double)attributes.get("cost");

		if (cost != null) {
			setCost(cost);
		}
	}

	@JSON
	@Override
	public long getCostId() {
		return _costId;
	}

	@Override
	public void setCostId(long costId) {
		_costId = costId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@JSON
	@Override
	public long getContentTypeID() {
		return _contentTypeID;
	}

	@Override
	public void setContentTypeID(long contentTypeID) {
		_columnBitmask |= CONTENTTYPEID_COLUMN_BITMASK;

		if (!_setOriginalContentTypeID) {
			_setOriginalContentTypeID = true;

			_originalContentTypeID = _contentTypeID;
		}

		_contentTypeID = contentTypeID;
	}

	public long getOriginalContentTypeID() {
		return _originalContentTypeID;
	}

	@JSON
	@Override
	public Date getFromDate() {
		return _fromDate;
	}

	@Override
	public void setFromDate(Date fromDate) {
		_columnBitmask |= FROMDATE_COLUMN_BITMASK;

		if (_originalFromDate == null) {
			_originalFromDate = _fromDate;
		}

		_fromDate = fromDate;
	}

	public Date getOriginalFromDate() {
		return _originalFromDate;
	}

	@JSON
	@Override
	public Date getToDate() {
		return _toDate;
	}

	@Override
	public void setToDate(Date toDate) {
		_columnBitmask = -1L;

		if (_originalToDate == null) {
			_originalToDate = _toDate;
		}

		_toDate = toDate;
	}

	public Date getOriginalToDate() {
		return _originalToDate;
	}

	@JSON
	@Override
	public double getCost() {
		return _cost;
	}

	@Override
	public void setCost(double cost) {
		_cost = cost;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			ContentTypeCost.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public ContentTypeCost toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (ContentTypeCost)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ContentTypeCostImpl contentTypeCostImpl = new ContentTypeCostImpl();

		contentTypeCostImpl.setCostId(getCostId());
		contentTypeCostImpl.setGroupId(getGroupId());
		contentTypeCostImpl.setContentTypeID(getContentTypeID());
		contentTypeCostImpl.setFromDate(getFromDate());
		contentTypeCostImpl.setToDate(getToDate());
		contentTypeCostImpl.setCost(getCost());

		contentTypeCostImpl.resetOriginalValues();

		return contentTypeCostImpl;
	}

	@Override
	public int compareTo(ContentTypeCost contentTypeCost) {
		int value = 0;

		value = DateUtil.compareTo(getToDate(), contentTypeCost.getToDate());

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof ContentTypeCost)) {
			return false;
		}

		ContentTypeCost contentTypeCost = (ContentTypeCost)obj;

		long primaryKey = contentTypeCost.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		ContentTypeCostModelImpl contentTypeCostModelImpl = this;

		contentTypeCostModelImpl._originalGroupId = contentTypeCostModelImpl._groupId;

		contentTypeCostModelImpl._setOriginalGroupId = false;

		contentTypeCostModelImpl._originalContentTypeID = contentTypeCostModelImpl._contentTypeID;

		contentTypeCostModelImpl._setOriginalContentTypeID = false;

		contentTypeCostModelImpl._originalFromDate = contentTypeCostModelImpl._fromDate;

		contentTypeCostModelImpl._originalToDate = contentTypeCostModelImpl._toDate;

		contentTypeCostModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<ContentTypeCost> toCacheModel() {
		ContentTypeCostCacheModel contentTypeCostCacheModel = new ContentTypeCostCacheModel();

		contentTypeCostCacheModel.costId = getCostId();

		contentTypeCostCacheModel.groupId = getGroupId();

		contentTypeCostCacheModel.contentTypeID = getContentTypeID();

		Date fromDate = getFromDate();

		if (fromDate != null) {
			contentTypeCostCacheModel.fromDate = fromDate.getTime();
		}
		else {
			contentTypeCostCacheModel.fromDate = Long.MIN_VALUE;
		}

		Date toDate = getToDate();

		if (toDate != null) {
			contentTypeCostCacheModel.toDate = toDate.getTime();
		}
		else {
			contentTypeCostCacheModel.toDate = Long.MIN_VALUE;
		}

		contentTypeCostCacheModel.cost = getCost();

		return contentTypeCostCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(13);

		sb.append("{costId=");
		sb.append(getCostId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", contentTypeID=");
		sb.append(getContentTypeID());
		sb.append(", fromDate=");
		sb.append(getFromDate());
		sb.append(", toDate=");
		sb.append(getToDate());
		sb.append(", cost=");
		sb.append(getCost());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(22);

		sb.append("<model><model-name>");
		sb.append("com.viettel.portal.vcms.model.ContentTypeCost");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>costId</column-name><column-value><![CDATA[");
		sb.append(getCostId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>contentTypeID</column-name><column-value><![CDATA[");
		sb.append(getContentTypeID());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>fromDate</column-name><column-value><![CDATA[");
		sb.append(getFromDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>toDate</column-name><column-value><![CDATA[");
		sb.append(getToDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>cost</column-name><column-value><![CDATA[");
		sb.append(getCost());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = ContentTypeCost.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			ContentTypeCost.class
		};
	private long _costId;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _contentTypeID;
	private long _originalContentTypeID;
	private boolean _setOriginalContentTypeID;
	private Date _fromDate;
	private Date _originalFromDate;
	private Date _toDate;
	private Date _originalToDate;
	private double _cost;
	private long _columnBitmask;
	private ContentTypeCost _escapedModel;
}