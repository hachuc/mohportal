/**
 * OpenCPS is the open source Core Public Services software
 * Copyright (C) 2016-present OpenCPS community
 * 
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU Affero General Public License for more details.
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>
 */

package com.viettel.portal.vcms.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;

import com.viettel.portal.vcms.model.Legal_Zone;
import com.viettel.portal.vcms.model.Legal_ZoneModel;
import com.viettel.portal.vcms.model.Legal_ZoneSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the Legal_Zone service. Represents a row in the &quot;Zone&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.viettel.portal.vcms.model.Legal_ZoneModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link Legal_ZoneImpl}.
 * </p>
 *
 * @author chuchv
 * @see Legal_ZoneImpl
 * @see com.viettel.portal.vcms.model.Legal_Zone
 * @see com.viettel.portal.vcms.model.Legal_ZoneModel
 * @generated
 */
@JSON(strict = true)
public class Legal_ZoneModelImpl extends BaseModelImpl<Legal_Zone>
	implements Legal_ZoneModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a legal_ zone model instance should use the {@link com.viettel.portal.vcms.model.Legal_Zone} interface instead.
	 */
	public static final String TABLE_NAME = "Zone";
	public static final Object[][] TABLE_COLUMNS = {
			{ "ID", Types.INTEGER },
			{ "CreationDate", Types.TIMESTAMP },
			{ "ModifiedDate", Types.TIMESTAMP },
			{ "Name", Types.VARCHAR },
			{ "Url", Types.VARCHAR },
			{ "Description", Types.VARCHAR },
			{ "ParentID", Types.INTEGER },
			{ "RealUrl", Types.VARCHAR },
			{ "Visible", Types.BOOLEAN },
			{ "Archived", Types.BOOLEAN },
			{ "SortOrder", Types.INTEGER }
		};
	public static final String TABLE_SQL_CREATE = "create table Zone (ID INTEGER not null primary key,CreationDate DATE null,ModifiedDate DATE null,Name VARCHAR(255) null,Url VARCHAR(75) null,Description VARCHAR(255) null,ParentID INTEGER,RealUrl VARCHAR(255) null,Visible BOOLEAN,Archived BOOLEAN,SortOrder INTEGER)";
	public static final String TABLE_SQL_DROP = "drop table Zone";
	public static final String ORDER_BY_JPQL = " ORDER BY legal_Zone.SortOrder ASC";
	public static final String ORDER_BY_SQL = " ORDER BY Zone.SortOrder ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.viettel.portal.vcms.model.Legal_Zone"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.viettel.portal.vcms.model.Legal_Zone"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.viettel.portal.vcms.model.Legal_Zone"),
			true);
	public static long VISIBLE_COLUMN_BITMASK = 1L;
	public static long SORTORDER_COLUMN_BITMASK = 2L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static Legal_Zone toModel(Legal_ZoneSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		Legal_Zone model = new Legal_ZoneImpl();

		model.setID(soapModel.getID());
		model.setCreationDate(soapModel.getCreationDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setName(soapModel.getName());
		model.setUrl(soapModel.getUrl());
		model.setDescription(soapModel.getDescription());
		model.setParentID(soapModel.getParentID());
		model.setRealUrl(soapModel.getRealUrl());
		model.setVisible(soapModel.getVisible());
		model.setArchived(soapModel.getArchived());
		model.setSortOrder(soapModel.getSortOrder());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<Legal_Zone> toModels(Legal_ZoneSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<Legal_Zone> models = new ArrayList<Legal_Zone>(soapModels.length);

		for (Legal_ZoneSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.viettel.portal.vcms.model.Legal_Zone"));

	public Legal_ZoneModelImpl() {
	}

	@Override
	public int getPrimaryKey() {
		return _ID;
	}

	@Override
	public void setPrimaryKey(int primaryKey) {
		setID(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _ID;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Integer)primaryKeyObj).intValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Legal_Zone.class;
	}

	@Override
	public String getModelClassName() {
		return Legal_Zone.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("ID", getID());
		attributes.put("CreationDate", getCreationDate());
		attributes.put("ModifiedDate", getModifiedDate());
		attributes.put("Name", getName());
		attributes.put("Url", getUrl());
		attributes.put("Description", getDescription());
		attributes.put("ParentID", getParentID());
		attributes.put("RealUrl", getRealUrl());
		attributes.put("Visible", getVisible());
		attributes.put("Archived", getArchived());
		attributes.put("SortOrder", getSortOrder());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Integer ID = (Integer)attributes.get("ID");

		if (ID != null) {
			setID(ID);
		}

		Date CreationDate = (Date)attributes.get("CreationDate");

		if (CreationDate != null) {
			setCreationDate(CreationDate);
		}

		Date ModifiedDate = (Date)attributes.get("ModifiedDate");

		if (ModifiedDate != null) {
			setModifiedDate(ModifiedDate);
		}

		String Name = (String)attributes.get("Name");

		if (Name != null) {
			setName(Name);
		}

		String Url = (String)attributes.get("Url");

		if (Url != null) {
			setUrl(Url);
		}

		String Description = (String)attributes.get("Description");

		if (Description != null) {
			setDescription(Description);
		}

		Integer ParentID = (Integer)attributes.get("ParentID");

		if (ParentID != null) {
			setParentID(ParentID);
		}

		String RealUrl = (String)attributes.get("RealUrl");

		if (RealUrl != null) {
			setRealUrl(RealUrl);
		}

		Boolean Visible = (Boolean)attributes.get("Visible");

		if (Visible != null) {
			setVisible(Visible);
		}

		Boolean Archived = (Boolean)attributes.get("Archived");

		if (Archived != null) {
			setArchived(Archived);
		}

		Integer SortOrder = (Integer)attributes.get("SortOrder");

		if (SortOrder != null) {
			setSortOrder(SortOrder);
		}
	}

	@JSON
	@Override
	public int getID() {
		return _ID;
	}

	@Override
	public void setID(int ID) {
		_ID = ID;
	}

	@JSON
	@Override
	public Date getCreationDate() {
		return _CreationDate;
	}

	@Override
	public void setCreationDate(Date CreationDate) {
		_CreationDate = CreationDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _ModifiedDate;
	}

	@Override
	public void setModifiedDate(Date ModifiedDate) {
		_ModifiedDate = ModifiedDate;
	}

	@JSON
	@Override
	public String getName() {
		if (_Name == null) {
			return StringPool.BLANK;
		}
		else {
			return _Name;
		}
	}

	@Override
	public void setName(String Name) {
		_Name = Name;
	}

	@JSON
	@Override
	public String getUrl() {
		if (_Url == null) {
			return StringPool.BLANK;
		}
		else {
			return _Url;
		}
	}

	@Override
	public void setUrl(String Url) {
		_Url = Url;
	}

	@JSON
	@Override
	public String getDescription() {
		if (_Description == null) {
			return StringPool.BLANK;
		}
		else {
			return _Description;
		}
	}

	@Override
	public void setDescription(String Description) {
		_Description = Description;
	}

	@JSON
	@Override
	public int getParentID() {
		return _ParentID;
	}

	@Override
	public void setParentID(int ParentID) {
		_ParentID = ParentID;
	}

	@JSON
	@Override
	public String getRealUrl() {
		if (_RealUrl == null) {
			return StringPool.BLANK;
		}
		else {
			return _RealUrl;
		}
	}

	@Override
	public void setRealUrl(String RealUrl) {
		_RealUrl = RealUrl;
	}

	@JSON
	@Override
	public boolean getVisible() {
		return _Visible;
	}

	@Override
	public boolean isVisible() {
		return _Visible;
	}

	@Override
	public void setVisible(boolean Visible) {
		_columnBitmask |= VISIBLE_COLUMN_BITMASK;

		if (!_setOriginalVisible) {
			_setOriginalVisible = true;

			_originalVisible = _Visible;
		}

		_Visible = Visible;
	}

	public boolean getOriginalVisible() {
		return _originalVisible;
	}

	@JSON
	@Override
	public boolean getArchived() {
		return _Archived;
	}

	@Override
	public boolean isArchived() {
		return _Archived;
	}

	@Override
	public void setArchived(boolean Archived) {
		_Archived = Archived;
	}

	@JSON
	@Override
	public int getSortOrder() {
		return _SortOrder;
	}

	@Override
	public void setSortOrder(int SortOrder) {
		_columnBitmask = -1L;

		_SortOrder = SortOrder;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public Legal_Zone toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Legal_Zone)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		Legal_ZoneImpl legal_ZoneImpl = new Legal_ZoneImpl();

		legal_ZoneImpl.setID(getID());
		legal_ZoneImpl.setCreationDate(getCreationDate());
		legal_ZoneImpl.setModifiedDate(getModifiedDate());
		legal_ZoneImpl.setName(getName());
		legal_ZoneImpl.setUrl(getUrl());
		legal_ZoneImpl.setDescription(getDescription());
		legal_ZoneImpl.setParentID(getParentID());
		legal_ZoneImpl.setRealUrl(getRealUrl());
		legal_ZoneImpl.setVisible(getVisible());
		legal_ZoneImpl.setArchived(getArchived());
		legal_ZoneImpl.setSortOrder(getSortOrder());

		legal_ZoneImpl.resetOriginalValues();

		return legal_ZoneImpl;
	}

	@Override
	public int compareTo(Legal_Zone legal_Zone) {
		int value = 0;

		if (getSortOrder() < legal_Zone.getSortOrder()) {
			value = -1;
		}
		else if (getSortOrder() > legal_Zone.getSortOrder()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Legal_Zone)) {
			return false;
		}

		Legal_Zone legal_Zone = (Legal_Zone)obj;

		int primaryKey = legal_Zone.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		Legal_ZoneModelImpl legal_ZoneModelImpl = this;

		legal_ZoneModelImpl._originalVisible = legal_ZoneModelImpl._Visible;

		legal_ZoneModelImpl._setOriginalVisible = false;

		legal_ZoneModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<Legal_Zone> toCacheModel() {
		Legal_ZoneCacheModel legal_ZoneCacheModel = new Legal_ZoneCacheModel();

		legal_ZoneCacheModel.ID = getID();

		Date CreationDate = getCreationDate();

		if (CreationDate != null) {
			legal_ZoneCacheModel.CreationDate = CreationDate.getTime();
		}
		else {
			legal_ZoneCacheModel.CreationDate = Long.MIN_VALUE;
		}

		Date ModifiedDate = getModifiedDate();

		if (ModifiedDate != null) {
			legal_ZoneCacheModel.ModifiedDate = ModifiedDate.getTime();
		}
		else {
			legal_ZoneCacheModel.ModifiedDate = Long.MIN_VALUE;
		}

		legal_ZoneCacheModel.Name = getName();

		String Name = legal_ZoneCacheModel.Name;

		if ((Name != null) && (Name.length() == 0)) {
			legal_ZoneCacheModel.Name = null;
		}

		legal_ZoneCacheModel.Url = getUrl();

		String Url = legal_ZoneCacheModel.Url;

		if ((Url != null) && (Url.length() == 0)) {
			legal_ZoneCacheModel.Url = null;
		}

		legal_ZoneCacheModel.Description = getDescription();

		String Description = legal_ZoneCacheModel.Description;

		if ((Description != null) && (Description.length() == 0)) {
			legal_ZoneCacheModel.Description = null;
		}

		legal_ZoneCacheModel.ParentID = getParentID();

		legal_ZoneCacheModel.RealUrl = getRealUrl();

		String RealUrl = legal_ZoneCacheModel.RealUrl;

		if ((RealUrl != null) && (RealUrl.length() == 0)) {
			legal_ZoneCacheModel.RealUrl = null;
		}

		legal_ZoneCacheModel.Visible = getVisible();

		legal_ZoneCacheModel.Archived = getArchived();

		legal_ZoneCacheModel.SortOrder = getSortOrder();

		return legal_ZoneCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(23);

		sb.append("{ID=");
		sb.append(getID());
		sb.append(", CreationDate=");
		sb.append(getCreationDate());
		sb.append(", ModifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", Name=");
		sb.append(getName());
		sb.append(", Url=");
		sb.append(getUrl());
		sb.append(", Description=");
		sb.append(getDescription());
		sb.append(", ParentID=");
		sb.append(getParentID());
		sb.append(", RealUrl=");
		sb.append(getRealUrl());
		sb.append(", Visible=");
		sb.append(getVisible());
		sb.append(", Archived=");
		sb.append(getArchived());
		sb.append(", SortOrder=");
		sb.append(getSortOrder());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(37);

		sb.append("<model><model-name>");
		sb.append("com.viettel.portal.vcms.model.Legal_Zone");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>ID</column-name><column-value><![CDATA[");
		sb.append(getID());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>CreationDate</column-name><column-value><![CDATA[");
		sb.append(getCreationDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>ModifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>Name</column-name><column-value><![CDATA[");
		sb.append(getName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>Url</column-name><column-value><![CDATA[");
		sb.append(getUrl());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>Description</column-name><column-value><![CDATA[");
		sb.append(getDescription());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>ParentID</column-name><column-value><![CDATA[");
		sb.append(getParentID());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>RealUrl</column-name><column-value><![CDATA[");
		sb.append(getRealUrl());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>Visible</column-name><column-value><![CDATA[");
		sb.append(getVisible());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>Archived</column-name><column-value><![CDATA[");
		sb.append(getArchived());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>SortOrder</column-name><column-value><![CDATA[");
		sb.append(getSortOrder());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = Legal_Zone.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			Legal_Zone.class
		};
	private int _ID;
	private Date _CreationDate;
	private Date _ModifiedDate;
	private String _Name;
	private String _Url;
	private String _Description;
	private int _ParentID;
	private String _RealUrl;
	private boolean _Visible;
	private boolean _originalVisible;
	private boolean _setOriginalVisible;
	private boolean _Archived;
	private int _SortOrder;
	private long _columnBitmask;
	private Legal_Zone _escapedModel;
}