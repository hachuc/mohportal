/**
 * OpenCPS is the open source Core Public Services software
 * Copyright (C) 2016-present OpenCPS community
 * 
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU Affero General Public License for more details.
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>
 */

package com.liferay.viettel.portal.counter.service.base;

import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.bean.IdentifiableBean;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQueryFactoryUtil;
import com.liferay.portal.kernel.dao.orm.Projection;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.search.Indexable;
import com.liferay.portal.kernel.search.IndexableType;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.model.PersistedModel;
import com.liferay.portal.service.BaseLocalServiceImpl;
import com.liferay.portal.service.PersistedModelLocalServiceRegistryUtil;
import com.liferay.portal.service.persistence.UserPersistence;

import com.liferay.viettel.portal.counter.model.CounterReport;
import com.liferay.viettel.portal.counter.service.CounterReportLocalService;
import com.liferay.viettel.portal.counter.service.persistence.CategoryPersistence;
import com.liferay.viettel.portal.counter.service.persistence.CounterReportFinder;
import com.liferay.viettel.portal.counter.service.persistence.CounterReportPersistence;

import java.io.Serializable;

import java.util.List;

import javax.sql.DataSource;

/**
 * Provides the base implementation for the counter report local service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link com.liferay.viettel.portal.counter.service.impl.CounterReportLocalServiceImpl}.
 * </p>
 *
 * @author chuchv
 * @see com.liferay.viettel.portal.counter.service.impl.CounterReportLocalServiceImpl
 * @see com.liferay.viettel.portal.counter.service.CounterReportLocalServiceUtil
 * @generated
 */
public abstract class CounterReportLocalServiceBaseImpl
	extends BaseLocalServiceImpl implements CounterReportLocalService,
		IdentifiableBean {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. Always use {@link com.liferay.viettel.portal.counter.service.CounterReportLocalServiceUtil} to access the counter report local service.
	 */

	/**
	 * Adds the counter report to the database. Also notifies the appropriate model listeners.
	 *
	 * @param counterReport the counter report
	 * @return the counter report that was added
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public CounterReport addCounterReport(CounterReport counterReport)
		throws SystemException {
		counterReport.setNew(true);

		return counterReportPersistence.update(counterReport);
	}

	/**
	 * Creates a new counter report with the primary key. Does not add the counter report to the database.
	 *
	 * @param reportId the primary key for the new counter report
	 * @return the new counter report
	 */
	@Override
	public CounterReport createCounterReport(long reportId) {
		return counterReportPersistence.create(reportId);
	}

	/**
	 * Deletes the counter report with the primary key from the database. Also notifies the appropriate model listeners.
	 *
	 * @param reportId the primary key of the counter report
	 * @return the counter report that was removed
	 * @throws PortalException if a counter report with the primary key could not be found
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public CounterReport deleteCounterReport(long reportId)
		throws PortalException, SystemException {
		return counterReportPersistence.remove(reportId);
	}

	/**
	 * Deletes the counter report from the database. Also notifies the appropriate model listeners.
	 *
	 * @param counterReport the counter report
	 * @return the counter report that was removed
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public CounterReport deleteCounterReport(CounterReport counterReport)
		throws SystemException {
		return counterReportPersistence.remove(counterReport);
	}

	@Override
	public DynamicQuery dynamicQuery() {
		Class<?> clazz = getClass();

		return DynamicQueryFactoryUtil.forClass(CounterReport.class,
			clazz.getClassLoader());
	}

	/**
	 * Performs a dynamic query on the database and returns the matching rows.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery)
		throws SystemException {
		return counterReportPersistence.findWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Performs a dynamic query on the database and returns a range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.liferay.viettel.portal.counter.model.impl.CounterReportModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @return the range of matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end)
		throws SystemException {
		return counterReportPersistence.findWithDynamicQuery(dynamicQuery,
			start, end);
	}

	/**
	 * Performs a dynamic query on the database and returns an ordered range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.liferay.viettel.portal.counter.model.impl.CounterReportModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	 * @return the ordered range of matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end,
		OrderByComparator orderByComparator) throws SystemException {
		return counterReportPersistence.findWithDynamicQuery(dynamicQuery,
			start, end, orderByComparator);
	}

	/**
	 * Returns the number of rows that match the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the number of rows that match the dynamic query
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery)
		throws SystemException {
		return counterReportPersistence.countWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Returns the number of rows that match the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @param projection the projection to apply to the query
	 * @return the number of rows that match the dynamic query
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery,
		Projection projection) throws SystemException {
		return counterReportPersistence.countWithDynamicQuery(dynamicQuery,
			projection);
	}

	@Override
	public CounterReport fetchCounterReport(long reportId)
		throws SystemException {
		return counterReportPersistence.fetchByPrimaryKey(reportId);
	}

	/**
	 * Returns the counter report with the primary key.
	 *
	 * @param reportId the primary key of the counter report
	 * @return the counter report
	 * @throws PortalException if a counter report with the primary key could not be found
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public CounterReport getCounterReport(long reportId)
		throws PortalException, SystemException {
		return counterReportPersistence.findByPrimaryKey(reportId);
	}

	@Override
	public PersistedModel getPersistedModel(Serializable primaryKeyObj)
		throws PortalException, SystemException {
		return counterReportPersistence.findByPrimaryKey(primaryKeyObj);
	}

	/**
	 * Returns a range of all the counter reports.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.liferay.viettel.portal.counter.model.impl.CounterReportModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param start the lower bound of the range of counter reports
	 * @param end the upper bound of the range of counter reports (not inclusive)
	 * @return the range of counter reports
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public List<CounterReport> getCounterReports(int start, int end)
		throws SystemException {
		return counterReportPersistence.findAll(start, end);
	}

	/**
	 * Returns the number of counter reports.
	 *
	 * @return the number of counter reports
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public int getCounterReportsCount() throws SystemException {
		return counterReportPersistence.countAll();
	}

	/**
	 * Updates the counter report in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
	 *
	 * @param counterReport the counter report
	 * @return the counter report that was updated
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public CounterReport updateCounterReport(CounterReport counterReport)
		throws SystemException {
		return counterReportPersistence.update(counterReport);
	}

	/**
	 * Returns the category local service.
	 *
	 * @return the category local service
	 */
	public com.liferay.viettel.portal.counter.service.CategoryLocalService getCategoryLocalService() {
		return categoryLocalService;
	}

	/**
	 * Sets the category local service.
	 *
	 * @param categoryLocalService the category local service
	 */
	public void setCategoryLocalService(
		com.liferay.viettel.portal.counter.service.CategoryLocalService categoryLocalService) {
		this.categoryLocalService = categoryLocalService;
	}

	/**
	 * Returns the category remote service.
	 *
	 * @return the category remote service
	 */
	public com.liferay.viettel.portal.counter.service.CategoryService getCategoryService() {
		return categoryService;
	}

	/**
	 * Sets the category remote service.
	 *
	 * @param categoryService the category remote service
	 */
	public void setCategoryService(
		com.liferay.viettel.portal.counter.service.CategoryService categoryService) {
		this.categoryService = categoryService;
	}

	/**
	 * Returns the category persistence.
	 *
	 * @return the category persistence
	 */
	public CategoryPersistence getCategoryPersistence() {
		return categoryPersistence;
	}

	/**
	 * Sets the category persistence.
	 *
	 * @param categoryPersistence the category persistence
	 */
	public void setCategoryPersistence(CategoryPersistence categoryPersistence) {
		this.categoryPersistence = categoryPersistence;
	}

	/**
	 * Returns the counter report local service.
	 *
	 * @return the counter report local service
	 */
	public com.liferay.viettel.portal.counter.service.CounterReportLocalService getCounterReportLocalService() {
		return counterReportLocalService;
	}

	/**
	 * Sets the counter report local service.
	 *
	 * @param counterReportLocalService the counter report local service
	 */
	public void setCounterReportLocalService(
		com.liferay.viettel.portal.counter.service.CounterReportLocalService counterReportLocalService) {
		this.counterReportLocalService = counterReportLocalService;
	}

	/**
	 * Returns the counter report remote service.
	 *
	 * @return the counter report remote service
	 */
	public com.liferay.viettel.portal.counter.service.CounterReportService getCounterReportService() {
		return counterReportService;
	}

	/**
	 * Sets the counter report remote service.
	 *
	 * @param counterReportService the counter report remote service
	 */
	public void setCounterReportService(
		com.liferay.viettel.portal.counter.service.CounterReportService counterReportService) {
		this.counterReportService = counterReportService;
	}

	/**
	 * Returns the counter report persistence.
	 *
	 * @return the counter report persistence
	 */
	public CounterReportPersistence getCounterReportPersistence() {
		return counterReportPersistence;
	}

	/**
	 * Sets the counter report persistence.
	 *
	 * @param counterReportPersistence the counter report persistence
	 */
	public void setCounterReportPersistence(
		CounterReportPersistence counterReportPersistence) {
		this.counterReportPersistence = counterReportPersistence;
	}

	/**
	 * Returns the counter report finder.
	 *
	 * @return the counter report finder
	 */
	public CounterReportFinder getCounterReportFinder() {
		return counterReportFinder;
	}

	/**
	 * Sets the counter report finder.
	 *
	 * @param counterReportFinder the counter report finder
	 */
	public void setCounterReportFinder(CounterReportFinder counterReportFinder) {
		this.counterReportFinder = counterReportFinder;
	}

	/**
	 * Returns the counter local service.
	 *
	 * @return the counter local service
	 */
	public com.liferay.counter.service.CounterLocalService getCounterLocalService() {
		return counterLocalService;
	}

	/**
	 * Sets the counter local service.
	 *
	 * @param counterLocalService the counter local service
	 */
	public void setCounterLocalService(
		com.liferay.counter.service.CounterLocalService counterLocalService) {
		this.counterLocalService = counterLocalService;
	}

	/**
	 * Returns the resource local service.
	 *
	 * @return the resource local service
	 */
	public com.liferay.portal.service.ResourceLocalService getResourceLocalService() {
		return resourceLocalService;
	}

	/**
	 * Sets the resource local service.
	 *
	 * @param resourceLocalService the resource local service
	 */
	public void setResourceLocalService(
		com.liferay.portal.service.ResourceLocalService resourceLocalService) {
		this.resourceLocalService = resourceLocalService;
	}

	/**
	 * Returns the user local service.
	 *
	 * @return the user local service
	 */
	public com.liferay.portal.service.UserLocalService getUserLocalService() {
		return userLocalService;
	}

	/**
	 * Sets the user local service.
	 *
	 * @param userLocalService the user local service
	 */
	public void setUserLocalService(
		com.liferay.portal.service.UserLocalService userLocalService) {
		this.userLocalService = userLocalService;
	}

	/**
	 * Returns the user remote service.
	 *
	 * @return the user remote service
	 */
	public com.liferay.portal.service.UserService getUserService() {
		return userService;
	}

	/**
	 * Sets the user remote service.
	 *
	 * @param userService the user remote service
	 */
	public void setUserService(
		com.liferay.portal.service.UserService userService) {
		this.userService = userService;
	}

	/**
	 * Returns the user persistence.
	 *
	 * @return the user persistence
	 */
	public UserPersistence getUserPersistence() {
		return userPersistence;
	}

	/**
	 * Sets the user persistence.
	 *
	 * @param userPersistence the user persistence
	 */
	public void setUserPersistence(UserPersistence userPersistence) {
		this.userPersistence = userPersistence;
	}

	public void afterPropertiesSet() {
		Class<?> clazz = getClass();

		_classLoader = clazz.getClassLoader();

		PersistedModelLocalServiceRegistryUtil.register("com.liferay.viettel.portal.counter.model.CounterReport",
			counterReportLocalService);
	}

	public void destroy() {
		PersistedModelLocalServiceRegistryUtil.unregister(
			"com.liferay.viettel.portal.counter.model.CounterReport");
	}

	/**
	 * Returns the Spring bean ID for this bean.
	 *
	 * @return the Spring bean ID for this bean
	 */
	@Override
	public String getBeanIdentifier() {
		return _beanIdentifier;
	}

	/**
	 * Sets the Spring bean ID for this bean.
	 *
	 * @param beanIdentifier the Spring bean ID for this bean
	 */
	@Override
	public void setBeanIdentifier(String beanIdentifier) {
		_beanIdentifier = beanIdentifier;
	}

	@Override
	public Object invokeMethod(String name, String[] parameterTypes,
		Object[] arguments) throws Throwable {
		Thread currentThread = Thread.currentThread();

		ClassLoader contextClassLoader = currentThread.getContextClassLoader();

		if (contextClassLoader != _classLoader) {
			currentThread.setContextClassLoader(_classLoader);
		}

		try {
			return _clpInvoker.invokeMethod(name, parameterTypes, arguments);
		}
		finally {
			if (contextClassLoader != _classLoader) {
				currentThread.setContextClassLoader(contextClassLoader);
			}
		}
	}

	protected Class<?> getModelClass() {
		return CounterReport.class;
	}

	protected String getModelClassName() {
		return CounterReport.class.getName();
	}

	/**
	 * Performs an SQL query.
	 *
	 * @param sql the sql query
	 */
	protected void runSQL(String sql) throws SystemException {
		try {
			DataSource dataSource = counterReportPersistence.getDataSource();

			SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(dataSource,
					sql, new int[0]);

			sqlUpdate.update();
		}
		catch (Exception e) {
			throw new SystemException(e);
		}
	}

	@BeanReference(type = com.liferay.viettel.portal.counter.service.CategoryLocalService.class)
	protected com.liferay.viettel.portal.counter.service.CategoryLocalService categoryLocalService;
	@BeanReference(type = com.liferay.viettel.portal.counter.service.CategoryService.class)
	protected com.liferay.viettel.portal.counter.service.CategoryService categoryService;
	@BeanReference(type = CategoryPersistence.class)
	protected CategoryPersistence categoryPersistence;
	@BeanReference(type = com.liferay.viettel.portal.counter.service.CounterReportLocalService.class)
	protected com.liferay.viettel.portal.counter.service.CounterReportLocalService counterReportLocalService;
	@BeanReference(type = com.liferay.viettel.portal.counter.service.CounterReportService.class)
	protected com.liferay.viettel.portal.counter.service.CounterReportService counterReportService;
	@BeanReference(type = CounterReportPersistence.class)
	protected CounterReportPersistence counterReportPersistence;
	@BeanReference(type = CounterReportFinder.class)
	protected CounterReportFinder counterReportFinder;
	@BeanReference(type = com.liferay.counter.service.CounterLocalService.class)
	protected com.liferay.counter.service.CounterLocalService counterLocalService;
	@BeanReference(type = com.liferay.portal.service.ResourceLocalService.class)
	protected com.liferay.portal.service.ResourceLocalService resourceLocalService;
	@BeanReference(type = com.liferay.portal.service.UserLocalService.class)
	protected com.liferay.portal.service.UserLocalService userLocalService;
	@BeanReference(type = com.liferay.portal.service.UserService.class)
	protected com.liferay.portal.service.UserService userService;
	@BeanReference(type = UserPersistence.class)
	protected UserPersistence userPersistence;
	private String _beanIdentifier;
	private ClassLoader _classLoader;
	private CounterReportLocalServiceClpInvoker _clpInvoker = new CounterReportLocalServiceClpInvoker();
}