/**
 * OpenCPS is the open source Core Public Services software
 * Copyright (C) 2016-present OpenCPS community
 * 
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU Affero General Public License for more details.
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>
 */

package com.viettel.portal.vcms.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import com.viettel.portal.vcms.model.Content;
import com.viettel.portal.vcms.model.ContentModel;
import com.viettel.portal.vcms.model.ContentSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the Content service. Represents a row in the &quot;vcms_Content&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.viettel.portal.vcms.model.ContentModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ContentImpl}.
 * </p>
 *
 * @author chuchv
 * @see ContentImpl
 * @see com.viettel.portal.vcms.model.Content
 * @see com.viettel.portal.vcms.model.ContentModel
 * @generated
 */
@JSON(strict = true)
public class ContentModelImpl extends BaseModelImpl<Content>
	implements ContentModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a content model instance should use the {@link com.viettel.portal.vcms.model.Content} interface instead.
	 */
	public static final String TABLE_NAME = "vcms_Content";
	public static final Object[][] TABLE_COLUMNS = {
			{ "autoId", Types.BIGINT },
			{ "contentId", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "userName", Types.VARCHAR },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "preVersion", Types.INTEGER },
			{ "version", Types.INTEGER },
			{ "subTitle", Types.VARCHAR },
			{ "title", Types.VARCHAR },
			{ "summary", Types.VARCHAR },
			{ "subContent", Types.VARCHAR },
			{ "content", Types.CLOB },
			{ "smallImageId", Types.BIGINT },
			{ "smallImageUrl", Types.VARCHAR },
			{ "categoryId", Types.BIGINT },
			{ "copyRight", Types.VARCHAR },
			{ "status", Types.INTEGER },
			{ "urlTitle", Types.VARCHAR },
			{ "newsType", Types.INTEGER },
			{ "imageUrl", Types.VARCHAR },
			{ "isLegalContent", Types.BOOLEAN },
			{ "imageCaption", Types.VARCHAR },
			{ "imagePosition", Types.INTEGER },
			{ "createdByUserId", Types.BIGINT },
			{ "editedByUserId", Types.BIGINT },
			{ "reviewedByUserId", Types.BIGINT },
			{ "publishedByUserId", Types.BIGINT },
			{ "createdByUserName", Types.VARCHAR },
			{ "editedByUserName", Types.VARCHAR },
			{ "reviewedByUserName", Types.VARCHAR },
			{ "publishedByUserName", Types.VARCHAR },
			{ "author", Types.VARCHAR },
			{ "jobTitle", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table vcms_Content (autoId LONG not null primary key,contentId LONG,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,preVersion INTEGER,version INTEGER,subTitle STRING null,title STRING null,summary STRING null,subContent STRING null,content TEXT null,smallImageId LONG,smallImageUrl VARCHAR(500) null,categoryId LONG,copyRight VARCHAR(255) null,status INTEGER,urlTitle VARCHAR(500) null,newsType INTEGER,imageUrl VARCHAR(500) null,isLegalContent BOOLEAN,imageCaption VARCHAR(1000) null,imagePosition INTEGER,createdByUserId LONG,editedByUserId LONG,reviewedByUserId LONG,publishedByUserId LONG,createdByUserName VARCHAR(75) null,editedByUserName VARCHAR(75) null,reviewedByUserName VARCHAR(75) null,publishedByUserName VARCHAR(75) null,author VARCHAR(255) null,jobTitle VARCHAR(255) null)";
	public static final String TABLE_SQL_DROP = "drop table vcms_Content";
	public static final String ORDER_BY_JPQL = " ORDER BY content.modifiedDate ASC";
	public static final String ORDER_BY_SQL = " ORDER BY vcms_Content.modifiedDate ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.viettel.portal.vcms.model.Content"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.viettel.portal.vcms.model.Content"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.viettel.portal.vcms.model.Content"),
			true);
	public static long CATEGORYID_COLUMN_BITMASK = 1L;
	public static long CONTENTID_COLUMN_BITMASK = 2L;
	public static long CREATEDBYUSERID_COLUMN_BITMASK = 4L;
	public static long EDITEDBYUSERID_COLUMN_BITMASK = 8L;
	public static long GROUPID_COLUMN_BITMASK = 16L;
	public static long PUBLISHEDBYUSERID_COLUMN_BITMASK = 32L;
	public static long REVIEWEDBYUSERID_COLUMN_BITMASK = 64L;
	public static long STATUS_COLUMN_BITMASK = 128L;
	public static long URLTITLE_COLUMN_BITMASK = 256L;
	public static long VERSION_COLUMN_BITMASK = 512L;
	public static long MODIFIEDDATE_COLUMN_BITMASK = 1024L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static Content toModel(ContentSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		Content model = new ContentImpl();

		model.setAutoId(soapModel.getAutoId());
		model.setContentId(soapModel.getContentId());
		model.setGroupId(soapModel.getGroupId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setUserId(soapModel.getUserId());
		model.setUserName(soapModel.getUserName());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setPreVersion(soapModel.getPreVersion());
		model.setVersion(soapModel.getVersion());
		model.setSubTitle(soapModel.getSubTitle());
		model.setTitle(soapModel.getTitle());
		model.setSummary(soapModel.getSummary());
		model.setSubContent(soapModel.getSubContent());
		model.setContent(soapModel.getContent());
		model.setSmallImageId(soapModel.getSmallImageId());
		model.setSmallImageUrl(soapModel.getSmallImageUrl());
		model.setCategoryId(soapModel.getCategoryId());
		model.setCopyRight(soapModel.getCopyRight());
		model.setStatus(soapModel.getStatus());
		model.setUrlTitle(soapModel.getUrlTitle());
		model.setNewsType(soapModel.getNewsType());
		model.setImageUrl(soapModel.getImageUrl());
		model.setIsLegalContent(soapModel.getIsLegalContent());
		model.setImageCaption(soapModel.getImageCaption());
		model.setImagePosition(soapModel.getImagePosition());
		model.setCreatedByUserId(soapModel.getCreatedByUserId());
		model.setEditedByUserId(soapModel.getEditedByUserId());
		model.setReviewedByUserId(soapModel.getReviewedByUserId());
		model.setPublishedByUserId(soapModel.getPublishedByUserId());
		model.setCreatedByUserName(soapModel.getCreatedByUserName());
		model.setEditedByUserName(soapModel.getEditedByUserName());
		model.setReviewedByUserName(soapModel.getReviewedByUserName());
		model.setPublishedByUserName(soapModel.getPublishedByUserName());
		model.setAuthor(soapModel.getAuthor());
		model.setJobTitle(soapModel.getJobTitle());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<Content> toModels(ContentSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<Content> models = new ArrayList<Content>(soapModels.length);

		for (ContentSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.viettel.portal.vcms.model.Content"));

	public ContentModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _autoId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setAutoId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _autoId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Content.class;
	}

	@Override
	public String getModelClassName() {
		return Content.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("autoId", getAutoId());
		attributes.put("contentId", getContentId());
		attributes.put("groupId", getGroupId());
		attributes.put("companyId", getCompanyId());
		attributes.put("userId", getUserId());
		attributes.put("userName", getUserName());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("preVersion", getPreVersion());
		attributes.put("version", getVersion());
		attributes.put("subTitle", getSubTitle());
		attributes.put("title", getTitle());
		attributes.put("summary", getSummary());
		attributes.put("subContent", getSubContent());
		attributes.put("content", getContent());
		attributes.put("smallImageId", getSmallImageId());
		attributes.put("smallImageUrl", getSmallImageUrl());
		attributes.put("categoryId", getCategoryId());
		attributes.put("copyRight", getCopyRight());
		attributes.put("status", getStatus());
		attributes.put("urlTitle", getUrlTitle());
		attributes.put("newsType", getNewsType());
		attributes.put("imageUrl", getImageUrl());
		attributes.put("isLegalContent", getIsLegalContent());
		attributes.put("imageCaption", getImageCaption());
		attributes.put("imagePosition", getImagePosition());
		attributes.put("createdByUserId", getCreatedByUserId());
		attributes.put("editedByUserId", getEditedByUserId());
		attributes.put("reviewedByUserId", getReviewedByUserId());
		attributes.put("publishedByUserId", getPublishedByUserId());
		attributes.put("createdByUserName", getCreatedByUserName());
		attributes.put("editedByUserName", getEditedByUserName());
		attributes.put("reviewedByUserName", getReviewedByUserName());
		attributes.put("publishedByUserName", getPublishedByUserName());
		attributes.put("author", getAuthor());
		attributes.put("jobTitle", getJobTitle());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long autoId = (Long)attributes.get("autoId");

		if (autoId != null) {
			setAutoId(autoId);
		}

		Long contentId = (Long)attributes.get("contentId");

		if (contentId != null) {
			setContentId(contentId);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		String userName = (String)attributes.get("userName");

		if (userName != null) {
			setUserName(userName);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		Integer preVersion = (Integer)attributes.get("preVersion");

		if (preVersion != null) {
			setPreVersion(preVersion);
		}

		Integer version = (Integer)attributes.get("version");

		if (version != null) {
			setVersion(version);
		}

		String subTitle = (String)attributes.get("subTitle");

		if (subTitle != null) {
			setSubTitle(subTitle);
		}

		String title = (String)attributes.get("title");

		if (title != null) {
			setTitle(title);
		}

		String summary = (String)attributes.get("summary");

		if (summary != null) {
			setSummary(summary);
		}

		String subContent = (String)attributes.get("subContent");

		if (subContent != null) {
			setSubContent(subContent);
		}

		String content = (String)attributes.get("content");

		if (content != null) {
			setContent(content);
		}

		Long smallImageId = (Long)attributes.get("smallImageId");

		if (smallImageId != null) {
			setSmallImageId(smallImageId);
		}

		String smallImageUrl = (String)attributes.get("smallImageUrl");

		if (smallImageUrl != null) {
			setSmallImageUrl(smallImageUrl);
		}

		Long categoryId = (Long)attributes.get("categoryId");

		if (categoryId != null) {
			setCategoryId(categoryId);
		}

		String copyRight = (String)attributes.get("copyRight");

		if (copyRight != null) {
			setCopyRight(copyRight);
		}

		Integer status = (Integer)attributes.get("status");

		if (status != null) {
			setStatus(status);
		}

		String urlTitle = (String)attributes.get("urlTitle");

		if (urlTitle != null) {
			setUrlTitle(urlTitle);
		}

		Integer newsType = (Integer)attributes.get("newsType");

		if (newsType != null) {
			setNewsType(newsType);
		}

		String imageUrl = (String)attributes.get("imageUrl");

		if (imageUrl != null) {
			setImageUrl(imageUrl);
		}

		Boolean isLegalContent = (Boolean)attributes.get("isLegalContent");

		if (isLegalContent != null) {
			setIsLegalContent(isLegalContent);
		}

		String imageCaption = (String)attributes.get("imageCaption");

		if (imageCaption != null) {
			setImageCaption(imageCaption);
		}

		Integer imagePosition = (Integer)attributes.get("imagePosition");

		if (imagePosition != null) {
			setImagePosition(imagePosition);
		}

		Long createdByUserId = (Long)attributes.get("createdByUserId");

		if (createdByUserId != null) {
			setCreatedByUserId(createdByUserId);
		}

		Long editedByUserId = (Long)attributes.get("editedByUserId");

		if (editedByUserId != null) {
			setEditedByUserId(editedByUserId);
		}

		Long reviewedByUserId = (Long)attributes.get("reviewedByUserId");

		if (reviewedByUserId != null) {
			setReviewedByUserId(reviewedByUserId);
		}

		Long publishedByUserId = (Long)attributes.get("publishedByUserId");

		if (publishedByUserId != null) {
			setPublishedByUserId(publishedByUserId);
		}

		String createdByUserName = (String)attributes.get("createdByUserName");

		if (createdByUserName != null) {
			setCreatedByUserName(createdByUserName);
		}

		String editedByUserName = (String)attributes.get("editedByUserName");

		if (editedByUserName != null) {
			setEditedByUserName(editedByUserName);
		}

		String reviewedByUserName = (String)attributes.get("reviewedByUserName");

		if (reviewedByUserName != null) {
			setReviewedByUserName(reviewedByUserName);
		}

		String publishedByUserName = (String)attributes.get(
				"publishedByUserName");

		if (publishedByUserName != null) {
			setPublishedByUserName(publishedByUserName);
		}

		String author = (String)attributes.get("author");

		if (author != null) {
			setAuthor(author);
		}

		String jobTitle = (String)attributes.get("jobTitle");

		if (jobTitle != null) {
			setJobTitle(jobTitle);
		}
	}

	@JSON
	@Override
	public long getAutoId() {
		return _autoId;
	}

	@Override
	public void setAutoId(long autoId) {
		_autoId = autoId;
	}

	@JSON
	@Override
	public long getContentId() {
		return _contentId;
	}

	@Override
	public void setContentId(long contentId) {
		_columnBitmask |= CONTENTID_COLUMN_BITMASK;

		if (!_setOriginalContentId) {
			_setOriginalContentId = true;

			_originalContentId = _contentId;
		}

		_contentId = contentId;
	}

	public long getOriginalContentId() {
		return _originalContentId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_companyId = companyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	@Override
	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return StringPool.BLANK;
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_columnBitmask = -1L;

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public int getPreVersion() {
		return _preVersion;
	}

	@Override
	public void setPreVersion(int preVersion) {
		_preVersion = preVersion;
	}

	@JSON
	@Override
	public int getVersion() {
		return _version;
	}

	@Override
	public void setVersion(int version) {
		_columnBitmask |= VERSION_COLUMN_BITMASK;

		if (!_setOriginalVersion) {
			_setOriginalVersion = true;

			_originalVersion = _version;
		}

		_version = version;
	}

	public int getOriginalVersion() {
		return _originalVersion;
	}

	@JSON
	@Override
	public String getSubTitle() {
		if (_subTitle == null) {
			return StringPool.BLANK;
		}
		else {
			return _subTitle;
		}
	}

	@Override
	public void setSubTitle(String subTitle) {
		_subTitle = subTitle;
	}

	@JSON
	@Override
	public String getTitle() {
		if (_title == null) {
			return StringPool.BLANK;
		}
		else {
			return _title;
		}
	}

	@Override
	public void setTitle(String title) {
		_title = title;
	}

	@JSON
	@Override
	public String getSummary() {
		if (_summary == null) {
			return StringPool.BLANK;
		}
		else {
			return _summary;
		}
	}

	@Override
	public void setSummary(String summary) {
		_summary = summary;
	}

	@JSON
	@Override
	public String getSubContent() {
		if (_subContent == null) {
			return StringPool.BLANK;
		}
		else {
			return _subContent;
		}
	}

	@Override
	public void setSubContent(String subContent) {
		_subContent = subContent;
	}

	@JSON
	@Override
	public String getContent() {
		if (_content == null) {
			return StringPool.BLANK;
		}
		else {
			return _content;
		}
	}

	@Override
	public void setContent(String content) {
		_content = content;
	}

	@JSON
	@Override
	public long getSmallImageId() {
		return _smallImageId;
	}

	@Override
	public void setSmallImageId(long smallImageId) {
		_smallImageId = smallImageId;
	}

	@JSON
	@Override
	public String getSmallImageUrl() {
		if (_smallImageUrl == null) {
			return StringPool.BLANK;
		}
		else {
			return _smallImageUrl;
		}
	}

	@Override
	public void setSmallImageUrl(String smallImageUrl) {
		_smallImageUrl = smallImageUrl;
	}

	@JSON
	@Override
	public long getCategoryId() {
		return _categoryId;
	}

	@Override
	public void setCategoryId(long categoryId) {
		_columnBitmask |= CATEGORYID_COLUMN_BITMASK;

		if (!_setOriginalCategoryId) {
			_setOriginalCategoryId = true;

			_originalCategoryId = _categoryId;
		}

		_categoryId = categoryId;
	}

	public long getOriginalCategoryId() {
		return _originalCategoryId;
	}

	@JSON
	@Override
	public String getCopyRight() {
		if (_copyRight == null) {
			return StringPool.BLANK;
		}
		else {
			return _copyRight;
		}
	}

	@Override
	public void setCopyRight(String copyRight) {
		_copyRight = copyRight;
	}

	@JSON
	@Override
	public int getStatus() {
		return _status;
	}

	@Override
	public void setStatus(int status) {
		_columnBitmask |= STATUS_COLUMN_BITMASK;

		if (!_setOriginalStatus) {
			_setOriginalStatus = true;

			_originalStatus = _status;
		}

		_status = status;
	}

	public int getOriginalStatus() {
		return _originalStatus;
	}

	@JSON
	@Override
	public String getUrlTitle() {
		if (_urlTitle == null) {
			return StringPool.BLANK;
		}
		else {
			return _urlTitle;
		}
	}

	@Override
	public void setUrlTitle(String urlTitle) {
		_columnBitmask |= URLTITLE_COLUMN_BITMASK;

		if (_originalUrlTitle == null) {
			_originalUrlTitle = _urlTitle;
		}

		_urlTitle = urlTitle;
	}

	public String getOriginalUrlTitle() {
		return GetterUtil.getString(_originalUrlTitle);
	}

	@JSON
	@Override
	public int getNewsType() {
		return _newsType;
	}

	@Override
	public void setNewsType(int newsType) {
		_newsType = newsType;
	}

	@JSON
	@Override
	public String getImageUrl() {
		if (_imageUrl == null) {
			return StringPool.BLANK;
		}
		else {
			return _imageUrl;
		}
	}

	@Override
	public void setImageUrl(String imageUrl) {
		_imageUrl = imageUrl;
	}

	@JSON
	@Override
	public boolean getIsLegalContent() {
		return _isLegalContent;
	}

	@Override
	public boolean isIsLegalContent() {
		return _isLegalContent;
	}

	@Override
	public void setIsLegalContent(boolean isLegalContent) {
		_isLegalContent = isLegalContent;
	}

	@JSON
	@Override
	public String getImageCaption() {
		if (_imageCaption == null) {
			return StringPool.BLANK;
		}
		else {
			return _imageCaption;
		}
	}

	@Override
	public void setImageCaption(String imageCaption) {
		_imageCaption = imageCaption;
	}

	@JSON
	@Override
	public int getImagePosition() {
		return _imagePosition;
	}

	@Override
	public void setImagePosition(int imagePosition) {
		_imagePosition = imagePosition;
	}

	@JSON
	@Override
	public long getCreatedByUserId() {
		return _createdByUserId;
	}

	@Override
	public void setCreatedByUserId(long createdByUserId) {
		_columnBitmask |= CREATEDBYUSERID_COLUMN_BITMASK;

		if (!_setOriginalCreatedByUserId) {
			_setOriginalCreatedByUserId = true;

			_originalCreatedByUserId = _createdByUserId;
		}

		_createdByUserId = createdByUserId;
	}

	@Override
	public String getCreatedByUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getCreatedByUserId(), "uuid",
			_createdByUserUuid);
	}

	@Override
	public void setCreatedByUserUuid(String createdByUserUuid) {
		_createdByUserUuid = createdByUserUuid;
	}

	public long getOriginalCreatedByUserId() {
		return _originalCreatedByUserId;
	}

	@JSON
	@Override
	public long getEditedByUserId() {
		return _editedByUserId;
	}

	@Override
	public void setEditedByUserId(long editedByUserId) {
		_columnBitmask |= EDITEDBYUSERID_COLUMN_BITMASK;

		if (!_setOriginalEditedByUserId) {
			_setOriginalEditedByUserId = true;

			_originalEditedByUserId = _editedByUserId;
		}

		_editedByUserId = editedByUserId;
	}

	@Override
	public String getEditedByUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getEditedByUserId(), "uuid",
			_editedByUserUuid);
	}

	@Override
	public void setEditedByUserUuid(String editedByUserUuid) {
		_editedByUserUuid = editedByUserUuid;
	}

	public long getOriginalEditedByUserId() {
		return _originalEditedByUserId;
	}

	@JSON
	@Override
	public long getReviewedByUserId() {
		return _reviewedByUserId;
	}

	@Override
	public void setReviewedByUserId(long reviewedByUserId) {
		_columnBitmask |= REVIEWEDBYUSERID_COLUMN_BITMASK;

		if (!_setOriginalReviewedByUserId) {
			_setOriginalReviewedByUserId = true;

			_originalReviewedByUserId = _reviewedByUserId;
		}

		_reviewedByUserId = reviewedByUserId;
	}

	@Override
	public String getReviewedByUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getReviewedByUserId(), "uuid",
			_reviewedByUserUuid);
	}

	@Override
	public void setReviewedByUserUuid(String reviewedByUserUuid) {
		_reviewedByUserUuid = reviewedByUserUuid;
	}

	public long getOriginalReviewedByUserId() {
		return _originalReviewedByUserId;
	}

	@JSON
	@Override
	public long getPublishedByUserId() {
		return _publishedByUserId;
	}

	@Override
	public void setPublishedByUserId(long publishedByUserId) {
		_columnBitmask |= PUBLISHEDBYUSERID_COLUMN_BITMASK;

		if (!_setOriginalPublishedByUserId) {
			_setOriginalPublishedByUserId = true;

			_originalPublishedByUserId = _publishedByUserId;
		}

		_publishedByUserId = publishedByUserId;
	}

	@Override
	public String getPublishedByUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getPublishedByUserId(), "uuid",
			_publishedByUserUuid);
	}

	@Override
	public void setPublishedByUserUuid(String publishedByUserUuid) {
		_publishedByUserUuid = publishedByUserUuid;
	}

	public long getOriginalPublishedByUserId() {
		return _originalPublishedByUserId;
	}

	@JSON
	@Override
	public String getCreatedByUserName() {
		if (_createdByUserName == null) {
			return StringPool.BLANK;
		}
		else {
			return _createdByUserName;
		}
	}

	@Override
	public void setCreatedByUserName(String createdByUserName) {
		_createdByUserName = createdByUserName;
	}

	@JSON
	@Override
	public String getEditedByUserName() {
		if (_editedByUserName == null) {
			return StringPool.BLANK;
		}
		else {
			return _editedByUserName;
		}
	}

	@Override
	public void setEditedByUserName(String editedByUserName) {
		_editedByUserName = editedByUserName;
	}

	@JSON
	@Override
	public String getReviewedByUserName() {
		if (_reviewedByUserName == null) {
			return StringPool.BLANK;
		}
		else {
			return _reviewedByUserName;
		}
	}

	@Override
	public void setReviewedByUserName(String reviewedByUserName) {
		_reviewedByUserName = reviewedByUserName;
	}

	@JSON
	@Override
	public String getPublishedByUserName() {
		if (_publishedByUserName == null) {
			return StringPool.BLANK;
		}
		else {
			return _publishedByUserName;
		}
	}

	@Override
	public void setPublishedByUserName(String publishedByUserName) {
		_publishedByUserName = publishedByUserName;
	}

	@JSON
	@Override
	public String getAuthor() {
		if (_author == null) {
			return StringPool.BLANK;
		}
		else {
			return _author;
		}
	}

	@Override
	public void setAuthor(String author) {
		_author = author;
	}

	@JSON
	@Override
	public String getJobTitle() {
		if (_jobTitle == null) {
			return StringPool.BLANK;
		}
		else {
			return _jobTitle;
		}
	}

	@Override
	public void setJobTitle(String jobTitle) {
		_jobTitle = jobTitle;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			Content.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Content toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Content)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ContentImpl contentImpl = new ContentImpl();

		contentImpl.setAutoId(getAutoId());
		contentImpl.setContentId(getContentId());
		contentImpl.setGroupId(getGroupId());
		contentImpl.setCompanyId(getCompanyId());
		contentImpl.setUserId(getUserId());
		contentImpl.setUserName(getUserName());
		contentImpl.setCreateDate(getCreateDate());
		contentImpl.setModifiedDate(getModifiedDate());
		contentImpl.setPreVersion(getPreVersion());
		contentImpl.setVersion(getVersion());
		contentImpl.setSubTitle(getSubTitle());
		contentImpl.setTitle(getTitle());
		contentImpl.setSummary(getSummary());
		contentImpl.setSubContent(getSubContent());
		contentImpl.setContent(getContent());
		contentImpl.setSmallImageId(getSmallImageId());
		contentImpl.setSmallImageUrl(getSmallImageUrl());
		contentImpl.setCategoryId(getCategoryId());
		contentImpl.setCopyRight(getCopyRight());
		contentImpl.setStatus(getStatus());
		contentImpl.setUrlTitle(getUrlTitle());
		contentImpl.setNewsType(getNewsType());
		contentImpl.setImageUrl(getImageUrl());
		contentImpl.setIsLegalContent(getIsLegalContent());
		contentImpl.setImageCaption(getImageCaption());
		contentImpl.setImagePosition(getImagePosition());
		contentImpl.setCreatedByUserId(getCreatedByUserId());
		contentImpl.setEditedByUserId(getEditedByUserId());
		contentImpl.setReviewedByUserId(getReviewedByUserId());
		contentImpl.setPublishedByUserId(getPublishedByUserId());
		contentImpl.setCreatedByUserName(getCreatedByUserName());
		contentImpl.setEditedByUserName(getEditedByUserName());
		contentImpl.setReviewedByUserName(getReviewedByUserName());
		contentImpl.setPublishedByUserName(getPublishedByUserName());
		contentImpl.setAuthor(getAuthor());
		contentImpl.setJobTitle(getJobTitle());

		contentImpl.resetOriginalValues();

		return contentImpl;
	}

	@Override
	public int compareTo(Content content) {
		int value = 0;

		value = DateUtil.compareTo(getModifiedDate(), content.getModifiedDate());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Content)) {
			return false;
		}

		Content content = (Content)obj;

		long primaryKey = content.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		ContentModelImpl contentModelImpl = this;

		contentModelImpl._originalContentId = contentModelImpl._contentId;

		contentModelImpl._setOriginalContentId = false;

		contentModelImpl._originalGroupId = contentModelImpl._groupId;

		contentModelImpl._setOriginalGroupId = false;

		contentModelImpl._originalVersion = contentModelImpl._version;

		contentModelImpl._setOriginalVersion = false;

		contentModelImpl._originalCategoryId = contentModelImpl._categoryId;

		contentModelImpl._setOriginalCategoryId = false;

		contentModelImpl._originalStatus = contentModelImpl._status;

		contentModelImpl._setOriginalStatus = false;

		contentModelImpl._originalUrlTitle = contentModelImpl._urlTitle;

		contentModelImpl._originalCreatedByUserId = contentModelImpl._createdByUserId;

		contentModelImpl._setOriginalCreatedByUserId = false;

		contentModelImpl._originalEditedByUserId = contentModelImpl._editedByUserId;

		contentModelImpl._setOriginalEditedByUserId = false;

		contentModelImpl._originalReviewedByUserId = contentModelImpl._reviewedByUserId;

		contentModelImpl._setOriginalReviewedByUserId = false;

		contentModelImpl._originalPublishedByUserId = contentModelImpl._publishedByUserId;

		contentModelImpl._setOriginalPublishedByUserId = false;

		contentModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<Content> toCacheModel() {
		ContentCacheModel contentCacheModel = new ContentCacheModel();

		contentCacheModel.autoId = getAutoId();

		contentCacheModel.contentId = getContentId();

		contentCacheModel.groupId = getGroupId();

		contentCacheModel.companyId = getCompanyId();

		contentCacheModel.userId = getUserId();

		contentCacheModel.userName = getUserName();

		String userName = contentCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			contentCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			contentCacheModel.createDate = createDate.getTime();
		}
		else {
			contentCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			contentCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			contentCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		contentCacheModel.preVersion = getPreVersion();

		contentCacheModel.version = getVersion();

		contentCacheModel.subTitle = getSubTitle();

		String subTitle = contentCacheModel.subTitle;

		if ((subTitle != null) && (subTitle.length() == 0)) {
			contentCacheModel.subTitle = null;
		}

		contentCacheModel.title = getTitle();

		String title = contentCacheModel.title;

		if ((title != null) && (title.length() == 0)) {
			contentCacheModel.title = null;
		}

		contentCacheModel.summary = getSummary();

		String summary = contentCacheModel.summary;

		if ((summary != null) && (summary.length() == 0)) {
			contentCacheModel.summary = null;
		}

		contentCacheModel.subContent = getSubContent();

		String subContent = contentCacheModel.subContent;

		if ((subContent != null) && (subContent.length() == 0)) {
			contentCacheModel.subContent = null;
		}

		contentCacheModel.content = getContent();

		String content = contentCacheModel.content;

		if ((content != null) && (content.length() == 0)) {
			contentCacheModel.content = null;
		}

		contentCacheModel.smallImageId = getSmallImageId();

		contentCacheModel.smallImageUrl = getSmallImageUrl();

		String smallImageUrl = contentCacheModel.smallImageUrl;

		if ((smallImageUrl != null) && (smallImageUrl.length() == 0)) {
			contentCacheModel.smallImageUrl = null;
		}

		contentCacheModel.categoryId = getCategoryId();

		contentCacheModel.copyRight = getCopyRight();

		String copyRight = contentCacheModel.copyRight;

		if ((copyRight != null) && (copyRight.length() == 0)) {
			contentCacheModel.copyRight = null;
		}

		contentCacheModel.status = getStatus();

		contentCacheModel.urlTitle = getUrlTitle();

		String urlTitle = contentCacheModel.urlTitle;

		if ((urlTitle != null) && (urlTitle.length() == 0)) {
			contentCacheModel.urlTitle = null;
		}

		contentCacheModel.newsType = getNewsType();

		contentCacheModel.imageUrl = getImageUrl();

		String imageUrl = contentCacheModel.imageUrl;

		if ((imageUrl != null) && (imageUrl.length() == 0)) {
			contentCacheModel.imageUrl = null;
		}

		contentCacheModel.isLegalContent = getIsLegalContent();

		contentCacheModel.imageCaption = getImageCaption();

		String imageCaption = contentCacheModel.imageCaption;

		if ((imageCaption != null) && (imageCaption.length() == 0)) {
			contentCacheModel.imageCaption = null;
		}

		contentCacheModel.imagePosition = getImagePosition();

		contentCacheModel.createdByUserId = getCreatedByUserId();

		contentCacheModel.editedByUserId = getEditedByUserId();

		contentCacheModel.reviewedByUserId = getReviewedByUserId();

		contentCacheModel.publishedByUserId = getPublishedByUserId();

		contentCacheModel.createdByUserName = getCreatedByUserName();

		String createdByUserName = contentCacheModel.createdByUserName;

		if ((createdByUserName != null) && (createdByUserName.length() == 0)) {
			contentCacheModel.createdByUserName = null;
		}

		contentCacheModel.editedByUserName = getEditedByUserName();

		String editedByUserName = contentCacheModel.editedByUserName;

		if ((editedByUserName != null) && (editedByUserName.length() == 0)) {
			contentCacheModel.editedByUserName = null;
		}

		contentCacheModel.reviewedByUserName = getReviewedByUserName();

		String reviewedByUserName = contentCacheModel.reviewedByUserName;

		if ((reviewedByUserName != null) && (reviewedByUserName.length() == 0)) {
			contentCacheModel.reviewedByUserName = null;
		}

		contentCacheModel.publishedByUserName = getPublishedByUserName();

		String publishedByUserName = contentCacheModel.publishedByUserName;

		if ((publishedByUserName != null) &&
				(publishedByUserName.length() == 0)) {
			contentCacheModel.publishedByUserName = null;
		}

		contentCacheModel.author = getAuthor();

		String author = contentCacheModel.author;

		if ((author != null) && (author.length() == 0)) {
			contentCacheModel.author = null;
		}

		contentCacheModel.jobTitle = getJobTitle();

		String jobTitle = contentCacheModel.jobTitle;

		if ((jobTitle != null) && (jobTitle.length() == 0)) {
			contentCacheModel.jobTitle = null;
		}

		return contentCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(73);

		sb.append("{autoId=");
		sb.append(getAutoId());
		sb.append(", contentId=");
		sb.append(getContentId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", userName=");
		sb.append(getUserName());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", preVersion=");
		sb.append(getPreVersion());
		sb.append(", version=");
		sb.append(getVersion());
		sb.append(", subTitle=");
		sb.append(getSubTitle());
		sb.append(", title=");
		sb.append(getTitle());
		sb.append(", summary=");
		sb.append(getSummary());
		sb.append(", subContent=");
		sb.append(getSubContent());
		sb.append(", content=");
		sb.append(getContent());
		sb.append(", smallImageId=");
		sb.append(getSmallImageId());
		sb.append(", smallImageUrl=");
		sb.append(getSmallImageUrl());
		sb.append(", categoryId=");
		sb.append(getCategoryId());
		sb.append(", copyRight=");
		sb.append(getCopyRight());
		sb.append(", status=");
		sb.append(getStatus());
		sb.append(", urlTitle=");
		sb.append(getUrlTitle());
		sb.append(", newsType=");
		sb.append(getNewsType());
		sb.append(", imageUrl=");
		sb.append(getImageUrl());
		sb.append(", isLegalContent=");
		sb.append(getIsLegalContent());
		sb.append(", imageCaption=");
		sb.append(getImageCaption());
		sb.append(", imagePosition=");
		sb.append(getImagePosition());
		sb.append(", createdByUserId=");
		sb.append(getCreatedByUserId());
		sb.append(", editedByUserId=");
		sb.append(getEditedByUserId());
		sb.append(", reviewedByUserId=");
		sb.append(getReviewedByUserId());
		sb.append(", publishedByUserId=");
		sb.append(getPublishedByUserId());
		sb.append(", createdByUserName=");
		sb.append(getCreatedByUserName());
		sb.append(", editedByUserName=");
		sb.append(getEditedByUserName());
		sb.append(", reviewedByUserName=");
		sb.append(getReviewedByUserName());
		sb.append(", publishedByUserName=");
		sb.append(getPublishedByUserName());
		sb.append(", author=");
		sb.append(getAuthor());
		sb.append(", jobTitle=");
		sb.append(getJobTitle());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(112);

		sb.append("<model><model-name>");
		sb.append("com.viettel.portal.vcms.model.Content");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>autoId</column-name><column-value><![CDATA[");
		sb.append(getAutoId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>contentId</column-name><column-value><![CDATA[");
		sb.append(getContentId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userName</column-name><column-value><![CDATA[");
		sb.append(getUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>preVersion</column-name><column-value><![CDATA[");
		sb.append(getPreVersion());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>version</column-name><column-value><![CDATA[");
		sb.append(getVersion());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>subTitle</column-name><column-value><![CDATA[");
		sb.append(getSubTitle());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>title</column-name><column-value><![CDATA[");
		sb.append(getTitle());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>summary</column-name><column-value><![CDATA[");
		sb.append(getSummary());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>subContent</column-name><column-value><![CDATA[");
		sb.append(getSubContent());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>content</column-name><column-value><![CDATA[");
		sb.append(getContent());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>smallImageId</column-name><column-value><![CDATA[");
		sb.append(getSmallImageId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>smallImageUrl</column-name><column-value><![CDATA[");
		sb.append(getSmallImageUrl());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>categoryId</column-name><column-value><![CDATA[");
		sb.append(getCategoryId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>copyRight</column-name><column-value><![CDATA[");
		sb.append(getCopyRight());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>status</column-name><column-value><![CDATA[");
		sb.append(getStatus());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>urlTitle</column-name><column-value><![CDATA[");
		sb.append(getUrlTitle());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>newsType</column-name><column-value><![CDATA[");
		sb.append(getNewsType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>imageUrl</column-name><column-value><![CDATA[");
		sb.append(getImageUrl());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>isLegalContent</column-name><column-value><![CDATA[");
		sb.append(getIsLegalContent());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>imageCaption</column-name><column-value><![CDATA[");
		sb.append(getImageCaption());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>imagePosition</column-name><column-value><![CDATA[");
		sb.append(getImagePosition());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createdByUserId</column-name><column-value><![CDATA[");
		sb.append(getCreatedByUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>editedByUserId</column-name><column-value><![CDATA[");
		sb.append(getEditedByUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>reviewedByUserId</column-name><column-value><![CDATA[");
		sb.append(getReviewedByUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>publishedByUserId</column-name><column-value><![CDATA[");
		sb.append(getPublishedByUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createdByUserName</column-name><column-value><![CDATA[");
		sb.append(getCreatedByUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>editedByUserName</column-name><column-value><![CDATA[");
		sb.append(getEditedByUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>reviewedByUserName</column-name><column-value><![CDATA[");
		sb.append(getReviewedByUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>publishedByUserName</column-name><column-value><![CDATA[");
		sb.append(getPublishedByUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>author</column-name><column-value><![CDATA[");
		sb.append(getAuthor());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>jobTitle</column-name><column-value><![CDATA[");
		sb.append(getJobTitle());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = Content.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			Content.class
		};
	private long _autoId;
	private long _contentId;
	private long _originalContentId;
	private boolean _setOriginalContentId;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _companyId;
	private long _userId;
	private String _userUuid;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private int _preVersion;
	private int _version;
	private int _originalVersion;
	private boolean _setOriginalVersion;
	private String _subTitle;
	private String _title;
	private String _summary;
	private String _subContent;
	private String _content;
	private long _smallImageId;
	private String _smallImageUrl;
	private long _categoryId;
	private long _originalCategoryId;
	private boolean _setOriginalCategoryId;
	private String _copyRight;
	private int _status;
	private int _originalStatus;
	private boolean _setOriginalStatus;
	private String _urlTitle;
	private String _originalUrlTitle;
	private int _newsType;
	private String _imageUrl;
	private boolean _isLegalContent;
	private String _imageCaption;
	private int _imagePosition;
	private long _createdByUserId;
	private String _createdByUserUuid;
	private long _originalCreatedByUserId;
	private boolean _setOriginalCreatedByUserId;
	private long _editedByUserId;
	private String _editedByUserUuid;
	private long _originalEditedByUserId;
	private boolean _setOriginalEditedByUserId;
	private long _reviewedByUserId;
	private String _reviewedByUserUuid;
	private long _originalReviewedByUserId;
	private boolean _setOriginalReviewedByUserId;
	private long _publishedByUserId;
	private String _publishedByUserUuid;
	private long _originalPublishedByUserId;
	private boolean _setOriginalPublishedByUserId;
	private String _createdByUserName;
	private String _editedByUserName;
	private String _reviewedByUserName;
	private String _publishedByUserName;
	private String _author;
	private String _jobTitle;
	private long _columnBitmask;
	private Content _escapedModel;
}