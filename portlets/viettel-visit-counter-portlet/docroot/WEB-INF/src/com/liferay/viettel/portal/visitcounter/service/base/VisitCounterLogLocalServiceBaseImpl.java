/**
 * OpenCPS is the open source Core Public Services software
 * Copyright (C) 2016-present OpenCPS community
 * 
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU Affero General Public License for more details.
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>
 */

package com.liferay.viettel.portal.visitcounter.service.base;

import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.bean.IdentifiableBean;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQueryFactoryUtil;
import com.liferay.portal.kernel.dao.orm.Projection;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.search.Indexable;
import com.liferay.portal.kernel.search.IndexableType;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.model.PersistedModel;
import com.liferay.portal.service.BaseLocalServiceImpl;
import com.liferay.portal.service.PersistedModelLocalServiceRegistryUtil;
import com.liferay.portal.service.persistence.UserPersistence;

import com.liferay.viettel.portal.visitcounter.model.VisitCounterLog;
import com.liferay.viettel.portal.visitcounter.service.VisitCounterLogLocalService;
import com.liferay.viettel.portal.visitcounter.service.persistence.VisitCounterLogPersistence;
import com.liferay.viettel.portal.visitcounter.service.persistence.VisitCounterPersistence;

import java.io.Serializable;

import java.util.List;

import javax.sql.DataSource;

/**
 * Provides the base implementation for the visit counter log local service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link com.liferay.viettel.portal.visitcounter.service.impl.VisitCounterLogLocalServiceImpl}.
 * </p>
 *
 * @author hiepth6
 * @see com.liferay.viettel.portal.visitcounter.service.impl.VisitCounterLogLocalServiceImpl
 * @see com.liferay.viettel.portal.visitcounter.service.VisitCounterLogLocalServiceUtil
 * @generated
 */
public abstract class VisitCounterLogLocalServiceBaseImpl
	extends BaseLocalServiceImpl implements VisitCounterLogLocalService,
		IdentifiableBean {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. Always use {@link com.liferay.viettel.portal.visitcounter.service.VisitCounterLogLocalServiceUtil} to access the visit counter log local service.
	 */

	/**
	 * Adds the visit counter log to the database. Also notifies the appropriate model listeners.
	 *
	 * @param visitCounterLog the visit counter log
	 * @return the visit counter log that was added
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public VisitCounterLog addVisitCounterLog(VisitCounterLog visitCounterLog)
		throws SystemException {
		visitCounterLog.setNew(true);

		return visitCounterLogPersistence.update(visitCounterLog);
	}

	/**
	 * Creates a new visit counter log with the primary key. Does not add the visit counter log to the database.
	 *
	 * @param visitorIp the primary key for the new visit counter log
	 * @return the new visit counter log
	 */
	@Override
	public VisitCounterLog createVisitCounterLog(String visitorIp) {
		return visitCounterLogPersistence.create(visitorIp);
	}

	/**
	 * Deletes the visit counter log with the primary key from the database. Also notifies the appropriate model listeners.
	 *
	 * @param visitorIp the primary key of the visit counter log
	 * @return the visit counter log that was removed
	 * @throws PortalException if a visit counter log with the primary key could not be found
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public VisitCounterLog deleteVisitCounterLog(String visitorIp)
		throws PortalException, SystemException {
		return visitCounterLogPersistence.remove(visitorIp);
	}

	/**
	 * Deletes the visit counter log from the database. Also notifies the appropriate model listeners.
	 *
	 * @param visitCounterLog the visit counter log
	 * @return the visit counter log that was removed
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public VisitCounterLog deleteVisitCounterLog(
		VisitCounterLog visitCounterLog) throws SystemException {
		return visitCounterLogPersistence.remove(visitCounterLog);
	}

	@Override
	public DynamicQuery dynamicQuery() {
		Class<?> clazz = getClass();

		return DynamicQueryFactoryUtil.forClass(VisitCounterLog.class,
			clazz.getClassLoader());
	}

	/**
	 * Performs a dynamic query on the database and returns the matching rows.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery)
		throws SystemException {
		return visitCounterLogPersistence.findWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Performs a dynamic query on the database and returns a range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.liferay.viettel.portal.visitcounter.model.impl.VisitCounterLogModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @return the range of matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end)
		throws SystemException {
		return visitCounterLogPersistence.findWithDynamicQuery(dynamicQuery,
			start, end);
	}

	/**
	 * Performs a dynamic query on the database and returns an ordered range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.liferay.viettel.portal.visitcounter.model.impl.VisitCounterLogModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	 * @return the ordered range of matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end,
		OrderByComparator orderByComparator) throws SystemException {
		return visitCounterLogPersistence.findWithDynamicQuery(dynamicQuery,
			start, end, orderByComparator);
	}

	/**
	 * Returns the number of rows that match the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the number of rows that match the dynamic query
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery)
		throws SystemException {
		return visitCounterLogPersistence.countWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Returns the number of rows that match the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @param projection the projection to apply to the query
	 * @return the number of rows that match the dynamic query
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery,
		Projection projection) throws SystemException {
		return visitCounterLogPersistence.countWithDynamicQuery(dynamicQuery,
			projection);
	}

	@Override
	public VisitCounterLog fetchVisitCounterLog(String visitorIp)
		throws SystemException {
		return visitCounterLogPersistence.fetchByPrimaryKey(visitorIp);
	}

	/**
	 * Returns the visit counter log with the primary key.
	 *
	 * @param visitorIp the primary key of the visit counter log
	 * @return the visit counter log
	 * @throws PortalException if a visit counter log with the primary key could not be found
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public VisitCounterLog getVisitCounterLog(String visitorIp)
		throws PortalException, SystemException {
		return visitCounterLogPersistence.findByPrimaryKey(visitorIp);
	}

	@Override
	public PersistedModel getPersistedModel(Serializable primaryKeyObj)
		throws PortalException, SystemException {
		return visitCounterLogPersistence.findByPrimaryKey(primaryKeyObj);
	}

	/**
	 * Returns a range of all the visit counter logs.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.liferay.viettel.portal.visitcounter.model.impl.VisitCounterLogModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param start the lower bound of the range of visit counter logs
	 * @param end the upper bound of the range of visit counter logs (not inclusive)
	 * @return the range of visit counter logs
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public List<VisitCounterLog> getVisitCounterLogs(int start, int end)
		throws SystemException {
		return visitCounterLogPersistence.findAll(start, end);
	}

	/**
	 * Returns the number of visit counter logs.
	 *
	 * @return the number of visit counter logs
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public int getVisitCounterLogsCount() throws SystemException {
		return visitCounterLogPersistence.countAll();
	}

	/**
	 * Updates the visit counter log in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
	 *
	 * @param visitCounterLog the visit counter log
	 * @return the visit counter log that was updated
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public VisitCounterLog updateVisitCounterLog(
		VisitCounterLog visitCounterLog) throws SystemException {
		return visitCounterLogPersistence.update(visitCounterLog);
	}

	/**
	 * Returns the visit counter local service.
	 *
	 * @return the visit counter local service
	 */
	public com.liferay.viettel.portal.visitcounter.service.VisitCounterLocalService getVisitCounterLocalService() {
		return visitCounterLocalService;
	}

	/**
	 * Sets the visit counter local service.
	 *
	 * @param visitCounterLocalService the visit counter local service
	 */
	public void setVisitCounterLocalService(
		com.liferay.viettel.portal.visitcounter.service.VisitCounterLocalService visitCounterLocalService) {
		this.visitCounterLocalService = visitCounterLocalService;
	}

	/**
	 * Returns the visit counter remote service.
	 *
	 * @return the visit counter remote service
	 */
	public com.liferay.viettel.portal.visitcounter.service.VisitCounterService getVisitCounterService() {
		return visitCounterService;
	}

	/**
	 * Sets the visit counter remote service.
	 *
	 * @param visitCounterService the visit counter remote service
	 */
	public void setVisitCounterService(
		com.liferay.viettel.portal.visitcounter.service.VisitCounterService visitCounterService) {
		this.visitCounterService = visitCounterService;
	}

	/**
	 * Returns the visit counter persistence.
	 *
	 * @return the visit counter persistence
	 */
	public VisitCounterPersistence getVisitCounterPersistence() {
		return visitCounterPersistence;
	}

	/**
	 * Sets the visit counter persistence.
	 *
	 * @param visitCounterPersistence the visit counter persistence
	 */
	public void setVisitCounterPersistence(
		VisitCounterPersistence visitCounterPersistence) {
		this.visitCounterPersistence = visitCounterPersistence;
	}

	/**
	 * Returns the visit counter log local service.
	 *
	 * @return the visit counter log local service
	 */
	public com.liferay.viettel.portal.visitcounter.service.VisitCounterLogLocalService getVisitCounterLogLocalService() {
		return visitCounterLogLocalService;
	}

	/**
	 * Sets the visit counter log local service.
	 *
	 * @param visitCounterLogLocalService the visit counter log local service
	 */
	public void setVisitCounterLogLocalService(
		com.liferay.viettel.portal.visitcounter.service.VisitCounterLogLocalService visitCounterLogLocalService) {
		this.visitCounterLogLocalService = visitCounterLogLocalService;
	}

	/**
	 * Returns the visit counter log remote service.
	 *
	 * @return the visit counter log remote service
	 */
	public com.liferay.viettel.portal.visitcounter.service.VisitCounterLogService getVisitCounterLogService() {
		return visitCounterLogService;
	}

	/**
	 * Sets the visit counter log remote service.
	 *
	 * @param visitCounterLogService the visit counter log remote service
	 */
	public void setVisitCounterLogService(
		com.liferay.viettel.portal.visitcounter.service.VisitCounterLogService visitCounterLogService) {
		this.visitCounterLogService = visitCounterLogService;
	}

	/**
	 * Returns the visit counter log persistence.
	 *
	 * @return the visit counter log persistence
	 */
	public VisitCounterLogPersistence getVisitCounterLogPersistence() {
		return visitCounterLogPersistence;
	}

	/**
	 * Sets the visit counter log persistence.
	 *
	 * @param visitCounterLogPersistence the visit counter log persistence
	 */
	public void setVisitCounterLogPersistence(
		VisitCounterLogPersistence visitCounterLogPersistence) {
		this.visitCounterLogPersistence = visitCounterLogPersistence;
	}

	/**
	 * Returns the counter local service.
	 *
	 * @return the counter local service
	 */
	public com.liferay.counter.service.CounterLocalService getCounterLocalService() {
		return counterLocalService;
	}

	/**
	 * Sets the counter local service.
	 *
	 * @param counterLocalService the counter local service
	 */
	public void setCounterLocalService(
		com.liferay.counter.service.CounterLocalService counterLocalService) {
		this.counterLocalService = counterLocalService;
	}

	/**
	 * Returns the resource local service.
	 *
	 * @return the resource local service
	 */
	public com.liferay.portal.service.ResourceLocalService getResourceLocalService() {
		return resourceLocalService;
	}

	/**
	 * Sets the resource local service.
	 *
	 * @param resourceLocalService the resource local service
	 */
	public void setResourceLocalService(
		com.liferay.portal.service.ResourceLocalService resourceLocalService) {
		this.resourceLocalService = resourceLocalService;
	}

	/**
	 * Returns the user local service.
	 *
	 * @return the user local service
	 */
	public com.liferay.portal.service.UserLocalService getUserLocalService() {
		return userLocalService;
	}

	/**
	 * Sets the user local service.
	 *
	 * @param userLocalService the user local service
	 */
	public void setUserLocalService(
		com.liferay.portal.service.UserLocalService userLocalService) {
		this.userLocalService = userLocalService;
	}

	/**
	 * Returns the user remote service.
	 *
	 * @return the user remote service
	 */
	public com.liferay.portal.service.UserService getUserService() {
		return userService;
	}

	/**
	 * Sets the user remote service.
	 *
	 * @param userService the user remote service
	 */
	public void setUserService(
		com.liferay.portal.service.UserService userService) {
		this.userService = userService;
	}

	/**
	 * Returns the user persistence.
	 *
	 * @return the user persistence
	 */
	public UserPersistence getUserPersistence() {
		return userPersistence;
	}

	/**
	 * Sets the user persistence.
	 *
	 * @param userPersistence the user persistence
	 */
	public void setUserPersistence(UserPersistence userPersistence) {
		this.userPersistence = userPersistence;
	}

	public void afterPropertiesSet() {
		Class<?> clazz = getClass();

		_classLoader = clazz.getClassLoader();

		PersistedModelLocalServiceRegistryUtil.register("com.liferay.viettel.portal.visitcounter.model.VisitCounterLog",
			visitCounterLogLocalService);
	}

	public void destroy() {
		PersistedModelLocalServiceRegistryUtil.unregister(
			"com.liferay.viettel.portal.visitcounter.model.VisitCounterLog");
	}

	/**
	 * Returns the Spring bean ID for this bean.
	 *
	 * @return the Spring bean ID for this bean
	 */
	@Override
	public String getBeanIdentifier() {
		return _beanIdentifier;
	}

	/**
	 * Sets the Spring bean ID for this bean.
	 *
	 * @param beanIdentifier the Spring bean ID for this bean
	 */
	@Override
	public void setBeanIdentifier(String beanIdentifier) {
		_beanIdentifier = beanIdentifier;
	}

	@Override
	public Object invokeMethod(String name, String[] parameterTypes,
		Object[] arguments) throws Throwable {
		Thread currentThread = Thread.currentThread();

		ClassLoader contextClassLoader = currentThread.getContextClassLoader();

		if (contextClassLoader != _classLoader) {
			currentThread.setContextClassLoader(_classLoader);
		}

		try {
			return _clpInvoker.invokeMethod(name, parameterTypes, arguments);
		}
		finally {
			if (contextClassLoader != _classLoader) {
				currentThread.setContextClassLoader(contextClassLoader);
			}
		}
	}

	protected Class<?> getModelClass() {
		return VisitCounterLog.class;
	}

	protected String getModelClassName() {
		return VisitCounterLog.class.getName();
	}

	/**
	 * Performs an SQL query.
	 *
	 * @param sql the sql query
	 */
	protected void runSQL(String sql) throws SystemException {
		try {
			DataSource dataSource = visitCounterLogPersistence.getDataSource();

			SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(dataSource,
					sql, new int[0]);

			sqlUpdate.update();
		}
		catch (Exception e) {
			throw new SystemException(e);
		}
	}

	@BeanReference(type = com.liferay.viettel.portal.visitcounter.service.VisitCounterLocalService.class)
	protected com.liferay.viettel.portal.visitcounter.service.VisitCounterLocalService visitCounterLocalService;
	@BeanReference(type = com.liferay.viettel.portal.visitcounter.service.VisitCounterService.class)
	protected com.liferay.viettel.portal.visitcounter.service.VisitCounterService visitCounterService;
	@BeanReference(type = VisitCounterPersistence.class)
	protected VisitCounterPersistence visitCounterPersistence;
	@BeanReference(type = com.liferay.viettel.portal.visitcounter.service.VisitCounterLogLocalService.class)
	protected com.liferay.viettel.portal.visitcounter.service.VisitCounterLogLocalService visitCounterLogLocalService;
	@BeanReference(type = com.liferay.viettel.portal.visitcounter.service.VisitCounterLogService.class)
	protected com.liferay.viettel.portal.visitcounter.service.VisitCounterLogService visitCounterLogService;
	@BeanReference(type = VisitCounterLogPersistence.class)
	protected VisitCounterLogPersistence visitCounterLogPersistence;
	@BeanReference(type = com.liferay.counter.service.CounterLocalService.class)
	protected com.liferay.counter.service.CounterLocalService counterLocalService;
	@BeanReference(type = com.liferay.portal.service.ResourceLocalService.class)
	protected com.liferay.portal.service.ResourceLocalService resourceLocalService;
	@BeanReference(type = com.liferay.portal.service.UserLocalService.class)
	protected com.liferay.portal.service.UserLocalService userLocalService;
	@BeanReference(type = com.liferay.portal.service.UserService.class)
	protected com.liferay.portal.service.UserService userService;
	@BeanReference(type = UserPersistence.class)
	protected UserPersistence userPersistence;
	private String _beanIdentifier;
	private ClassLoader _classLoader;
	private VisitCounterLogLocalServiceClpInvoker _clpInvoker = new VisitCounterLogLocalServiceClpInvoker();
}