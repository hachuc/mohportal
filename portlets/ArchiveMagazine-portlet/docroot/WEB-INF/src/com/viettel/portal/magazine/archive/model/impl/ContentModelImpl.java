/**
 * OpenCPS is the open source Core Public Services software
 * Copyright (C) 2016-present OpenCPS community
 * 
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU Affero General Public License for more details.
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>
 */

package com.viettel.portal.magazine.archive.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;

import com.viettel.portal.magazine.archive.model.Content;
import com.viettel.portal.magazine.archive.model.ContentModel;
import com.viettel.portal.magazine.archive.model.ContentSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the Content service. Represents a row in the &quot;ArchiveContent&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.viettel.portal.magazine.archive.model.ContentModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ContentImpl}.
 * </p>
 *
 * @author namtv
 * @see ContentImpl
 * @see com.viettel.portal.magazine.archive.model.Content
 * @see com.viettel.portal.magazine.archive.model.ContentModel
 * @generated
 */
@JSON(strict = true)
public class ContentModelImpl extends BaseModelImpl<Content>
	implements ContentModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a content model instance should use the {@link com.viettel.portal.magazine.archive.model.Content} interface instead.
	 */
	public static final String TABLE_NAME = "ArchiveContent";
	public static final Object[][] TABLE_COLUMNS = {
			{ "ID", Types.INTEGER },
			{ "Subject", Types.VARCHAR },
			{ "NormalZoneID", Types.INTEGER },
			{ "SpecialZoneID", Types.INTEGER },
			{ "FileUrl", Types.VARCHAR },
			{ "Author", Types.VARCHAR },
			{ "AuthorTitle", Types.VARCHAR },
			{ "MagazineID", Types.INTEGER },
			{ "SortOrder", Types.INTEGER },
			{ "CreationDate", Types.TIMESTAMP }
		};
	public static final String TABLE_SQL_CREATE = "create table ArchiveContent (ID INTEGER not null primary key,Subject VARCHAR(75) null,NormalZoneID INTEGER,SpecialZoneID INTEGER,FileUrl VARCHAR(75) null,Author VARCHAR(75) null,AuthorTitle VARCHAR(75) null,MagazineID INTEGER,SortOrder INTEGER,CreationDate DATE null)";
	public static final String TABLE_SQL_DROP = "drop table ArchiveContent";
	public static final String ORDER_BY_JPQL = " ORDER BY content.SortOrder ASC";
	public static final String ORDER_BY_SQL = " ORDER BY ArchiveContent.SortOrder ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.viettel.portal.magazine.archive.model.Content"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.viettel.portal.magazine.archive.model.Content"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.viettel.portal.magazine.archive.model.Content"),
			true);
	public static long MAGAZINEID_COLUMN_BITMASK = 1L;
	public static long SORTORDER_COLUMN_BITMASK = 2L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static Content toModel(ContentSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		Content model = new ContentImpl();

		model.setID(soapModel.getID());
		model.setSubject(soapModel.getSubject());
		model.setNormalZoneID(soapModel.getNormalZoneID());
		model.setSpecialZoneID(soapModel.getSpecialZoneID());
		model.setFileUrl(soapModel.getFileUrl());
		model.setAuthor(soapModel.getAuthor());
		model.setAuthorTitle(soapModel.getAuthorTitle());
		model.setMagazineID(soapModel.getMagazineID());
		model.setSortOrder(soapModel.getSortOrder());
		model.setCreationDate(soapModel.getCreationDate());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<Content> toModels(ContentSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<Content> models = new ArrayList<Content>(soapModels.length);

		for (ContentSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.viettel.portal.magazine.archive.model.Content"));

	public ContentModelImpl() {
	}

	@Override
	public int getPrimaryKey() {
		return _ID;
	}

	@Override
	public void setPrimaryKey(int primaryKey) {
		setID(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _ID;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Integer)primaryKeyObj).intValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Content.class;
	}

	@Override
	public String getModelClassName() {
		return Content.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("ID", getID());
		attributes.put("Subject", getSubject());
		attributes.put("NormalZoneID", getNormalZoneID());
		attributes.put("SpecialZoneID", getSpecialZoneID());
		attributes.put("FileUrl", getFileUrl());
		attributes.put("Author", getAuthor());
		attributes.put("AuthorTitle", getAuthorTitle());
		attributes.put("MagazineID", getMagazineID());
		attributes.put("SortOrder", getSortOrder());
		attributes.put("CreationDate", getCreationDate());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Integer ID = (Integer)attributes.get("ID");

		if (ID != null) {
			setID(ID);
		}

		String Subject = (String)attributes.get("Subject");

		if (Subject != null) {
			setSubject(Subject);
		}

		Integer NormalZoneID = (Integer)attributes.get("NormalZoneID");

		if (NormalZoneID != null) {
			setNormalZoneID(NormalZoneID);
		}

		Integer SpecialZoneID = (Integer)attributes.get("SpecialZoneID");

		if (SpecialZoneID != null) {
			setSpecialZoneID(SpecialZoneID);
		}

		String FileUrl = (String)attributes.get("FileUrl");

		if (FileUrl != null) {
			setFileUrl(FileUrl);
		}

		String Author = (String)attributes.get("Author");

		if (Author != null) {
			setAuthor(Author);
		}

		String AuthorTitle = (String)attributes.get("AuthorTitle");

		if (AuthorTitle != null) {
			setAuthorTitle(AuthorTitle);
		}

		Integer MagazineID = (Integer)attributes.get("MagazineID");

		if (MagazineID != null) {
			setMagazineID(MagazineID);
		}

		Integer SortOrder = (Integer)attributes.get("SortOrder");

		if (SortOrder != null) {
			setSortOrder(SortOrder);
		}

		Date CreationDate = (Date)attributes.get("CreationDate");

		if (CreationDate != null) {
			setCreationDate(CreationDate);
		}
	}

	@JSON
	@Override
	public int getID() {
		return _ID;
	}

	@Override
	public void setID(int ID) {
		_ID = ID;
	}

	@JSON
	@Override
	public String getSubject() {
		if (_Subject == null) {
			return StringPool.BLANK;
		}
		else {
			return _Subject;
		}
	}

	@Override
	public void setSubject(String Subject) {
		_Subject = Subject;
	}

	@JSON
	@Override
	public int getNormalZoneID() {
		return _NormalZoneID;
	}

	@Override
	public void setNormalZoneID(int NormalZoneID) {
		_NormalZoneID = NormalZoneID;
	}

	@JSON
	@Override
	public int getSpecialZoneID() {
		return _SpecialZoneID;
	}

	@Override
	public void setSpecialZoneID(int SpecialZoneID) {
		_SpecialZoneID = SpecialZoneID;
	}

	@JSON
	@Override
	public String getFileUrl() {
		if (_FileUrl == null) {
			return StringPool.BLANK;
		}
		else {
			return _FileUrl;
		}
	}

	@Override
	public void setFileUrl(String FileUrl) {
		_FileUrl = FileUrl;
	}

	@JSON
	@Override
	public String getAuthor() {
		if (_Author == null) {
			return StringPool.BLANK;
		}
		else {
			return _Author;
		}
	}

	@Override
	public void setAuthor(String Author) {
		_Author = Author;
	}

	@JSON
	@Override
	public String getAuthorTitle() {
		if (_AuthorTitle == null) {
			return StringPool.BLANK;
		}
		else {
			return _AuthorTitle;
		}
	}

	@Override
	public void setAuthorTitle(String AuthorTitle) {
		_AuthorTitle = AuthorTitle;
	}

	@JSON
	@Override
	public int getMagazineID() {
		return _MagazineID;
	}

	@Override
	public void setMagazineID(int MagazineID) {
		_columnBitmask |= MAGAZINEID_COLUMN_BITMASK;

		if (!_setOriginalMagazineID) {
			_setOriginalMagazineID = true;

			_originalMagazineID = _MagazineID;
		}

		_MagazineID = MagazineID;
	}

	public int getOriginalMagazineID() {
		return _originalMagazineID;
	}

	@JSON
	@Override
	public int getSortOrder() {
		return _SortOrder;
	}

	@Override
	public void setSortOrder(int SortOrder) {
		_columnBitmask = -1L;

		_SortOrder = SortOrder;
	}

	@JSON
	@Override
	public Date getCreationDate() {
		return _CreationDate;
	}

	@Override
	public void setCreationDate(Date CreationDate) {
		_CreationDate = CreationDate;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public Content toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Content)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ContentImpl contentImpl = new ContentImpl();

		contentImpl.setID(getID());
		contentImpl.setSubject(getSubject());
		contentImpl.setNormalZoneID(getNormalZoneID());
		contentImpl.setSpecialZoneID(getSpecialZoneID());
		contentImpl.setFileUrl(getFileUrl());
		contentImpl.setAuthor(getAuthor());
		contentImpl.setAuthorTitle(getAuthorTitle());
		contentImpl.setMagazineID(getMagazineID());
		contentImpl.setSortOrder(getSortOrder());
		contentImpl.setCreationDate(getCreationDate());

		contentImpl.resetOriginalValues();

		return contentImpl;
	}

	@Override
	public int compareTo(Content content) {
		int value = 0;

		if (getSortOrder() < content.getSortOrder()) {
			value = -1;
		}
		else if (getSortOrder() > content.getSortOrder()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Content)) {
			return false;
		}

		Content content = (Content)obj;

		int primaryKey = content.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		ContentModelImpl contentModelImpl = this;

		contentModelImpl._originalMagazineID = contentModelImpl._MagazineID;

		contentModelImpl._setOriginalMagazineID = false;

		contentModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<Content> toCacheModel() {
		ContentCacheModel contentCacheModel = new ContentCacheModel();

		contentCacheModel.ID = getID();

		contentCacheModel.Subject = getSubject();

		String Subject = contentCacheModel.Subject;

		if ((Subject != null) && (Subject.length() == 0)) {
			contentCacheModel.Subject = null;
		}

		contentCacheModel.NormalZoneID = getNormalZoneID();

		contentCacheModel.SpecialZoneID = getSpecialZoneID();

		contentCacheModel.FileUrl = getFileUrl();

		String FileUrl = contentCacheModel.FileUrl;

		if ((FileUrl != null) && (FileUrl.length() == 0)) {
			contentCacheModel.FileUrl = null;
		}

		contentCacheModel.Author = getAuthor();

		String Author = contentCacheModel.Author;

		if ((Author != null) && (Author.length() == 0)) {
			contentCacheModel.Author = null;
		}

		contentCacheModel.AuthorTitle = getAuthorTitle();

		String AuthorTitle = contentCacheModel.AuthorTitle;

		if ((AuthorTitle != null) && (AuthorTitle.length() == 0)) {
			contentCacheModel.AuthorTitle = null;
		}

		contentCacheModel.MagazineID = getMagazineID();

		contentCacheModel.SortOrder = getSortOrder();

		Date CreationDate = getCreationDate();

		if (CreationDate != null) {
			contentCacheModel.CreationDate = CreationDate.getTime();
		}
		else {
			contentCacheModel.CreationDate = Long.MIN_VALUE;
		}

		return contentCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(21);

		sb.append("{ID=");
		sb.append(getID());
		sb.append(", Subject=");
		sb.append(getSubject());
		sb.append(", NormalZoneID=");
		sb.append(getNormalZoneID());
		sb.append(", SpecialZoneID=");
		sb.append(getSpecialZoneID());
		sb.append(", FileUrl=");
		sb.append(getFileUrl());
		sb.append(", Author=");
		sb.append(getAuthor());
		sb.append(", AuthorTitle=");
		sb.append(getAuthorTitle());
		sb.append(", MagazineID=");
		sb.append(getMagazineID());
		sb.append(", SortOrder=");
		sb.append(getSortOrder());
		sb.append(", CreationDate=");
		sb.append(getCreationDate());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(34);

		sb.append("<model><model-name>");
		sb.append("com.viettel.portal.magazine.archive.model.Content");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>ID</column-name><column-value><![CDATA[");
		sb.append(getID());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>Subject</column-name><column-value><![CDATA[");
		sb.append(getSubject());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>NormalZoneID</column-name><column-value><![CDATA[");
		sb.append(getNormalZoneID());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>SpecialZoneID</column-name><column-value><![CDATA[");
		sb.append(getSpecialZoneID());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>FileUrl</column-name><column-value><![CDATA[");
		sb.append(getFileUrl());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>Author</column-name><column-value><![CDATA[");
		sb.append(getAuthor());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>AuthorTitle</column-name><column-value><![CDATA[");
		sb.append(getAuthorTitle());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>MagazineID</column-name><column-value><![CDATA[");
		sb.append(getMagazineID());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>SortOrder</column-name><column-value><![CDATA[");
		sb.append(getSortOrder());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>CreationDate</column-name><column-value><![CDATA[");
		sb.append(getCreationDate());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = Content.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			Content.class
		};
	private int _ID;
	private String _Subject;
	private int _NormalZoneID;
	private int _SpecialZoneID;
	private String _FileUrl;
	private String _Author;
	private String _AuthorTitle;
	private int _MagazineID;
	private int _originalMagazineID;
	private boolean _setOriginalMagazineID;
	private int _SortOrder;
	private Date _CreationDate;
	private long _columnBitmask;
	private Content _escapedModel;
}